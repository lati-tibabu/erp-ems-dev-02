import React from 'react'
import { BrowserRouter as Router } from 'react-router-dom'
import AllRoutes from './routes'
import './App.css'

import 'normalize.css'; // for normalizing the default styling applied by the react itself

import './index.css'
// import CreateUser from './pages/create_user'
// import AdminLogin from './pages/admin_login'
// import AdminDashboard from './pages/admin/admin_dashboard'
// import StudentLogin from './pages/student_login'
// import SchoolCreate from './pages/school_create'
// import AdminLogin2 from './pages/admin/login'
import ViewSchool from './pages/admin/dashboard-contents/school-pages/view-school';

function App() {
  return (
    // <Router>
    //   <AllRoutes />
    // </Router>
    // <div>App</div>
    // <CreateUser />
    // <AdminLogin2 />
    // <AdminDashboard />
    // <StudentLogin />
    // <SchoolCreate/>
    <ViewSchool />
  )
}

export default App
import React from 'react';
import ColumnWrapper from '../components/column_wrapper';
import RowWrapper from '../components/row_wrapper';
import { AiLogo, AiLogo2, AiLogo3 } from '../components/ems_logo';
import { Label, Paragraph, Heading1, Heading2, Heading3, Heading4, Heading5 } from '../components/Typography';
// import { color } from 'chart.js/helpers';
import { PrimaryButton } from "../components/buttons";
import {Link} from 'react-router-dom'
import 'normalize.css'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

function Home() {
  const em_border = 'none';
  const styles = {
    main_container: {
      // background: 'rgba(0,110,129,0.081)',
      minHeight: '100vh',
      border: em_border,
    },
    logo_styles: {
      width: '100px',
      height: '100px',
      border: '2px solid rgba(10, 200, 209, 0.31)'
    },
    logo_and_name: {
      alignItems: 'center',
      border: em_border,
      gap: '20px',
    },
    saas_name_wrapper: {
      gap: '0px',
      border: em_border,
    },
    saas_name_school: {
      background: 'rgb(0, 57, 110)',
      color: 'white',
      border: em_border,
      borderRadius: '4px',
    },
    saas_name_school_text: {
      color: 'white',
    },
    saas_name_stream: {
      border: em_border,
    },
    header_container: {
      background: 'white',
      borderRadius: '20px',
      gap: '20px',
      alignItems: 'center',
      border: em_border,
      padding: '20px',
    },
    body_container: {
      flex: '5',
      border: em_border,
      flexDirection: 'row',
      display: 'flex',
      gap: '30px',
    },
    side_body_container: {
      width: '20%',
      padding: '20px',
      background: '#f5f5f5',
      border: em_border,
      display: 'flex',
      flexDirection: 'column',
      gap: '20px',
    },
    main_body_container: {
      width: '80%',
      padding: '20px',
      background: '#ffffff',
      border: em_border,
      display: 'flex',
      flexDirection: 'column',
      gap: '30px',
    },
    footer_container: {
      background: '#004d99',
      color: 'white',
      padding: '10px 20px',
      textAlign: 'center',
      border: em_border,
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      gap: '10px',
    },
    navigation_bar_container: {
      padding: '10px',
      gap: '20px',
      border: em_border,
      display: 'flex',
      flexDirection: 'row',
    },
    navigation_bar_texts_style: {
      fontWeight: 'normal',
      cursor: 'pointer',
      fontSize: '0.9em',
    },
    section_container: {
      marginBottom: '30px',
      // maxWidth: '100vh',
      border: em_border,
      display: 'flex',
      flexDirection: 'column',
      gap: '20px',
    },
    feature_card: {
      padding: '20px',
      border: '1px solid #ddd',
      borderRadius: '8px',
      marginBottom: '20px',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
      flex: '1',
    },
    testimonial_card: {
      padding: '20px',
      border: '1px solid #ddd',
      borderRadius: '8px',
      marginBottom: '20px',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
      textAlign: 'center',
      flex: '1',
    },
    testimonial_quote: {
      fontStyle: 'italic',
    },
    testimonial_author: {
      fontWeight: 'bold',
      marginTop: '10px',
    },
    row_wrapper: {
      display: 'flex',
      flexDirection: 'row',
      gap: '20px',
      flexWrap: 'wrap',
      border: em_border,
    },
    column_wrapper: {
      display: 'flex',
      flexDirection: 'column',
      gap: '20px',
      border: em_border,
    },
    button_wrapper: {
      display: 'flex',
      justifyContent: 'center',
      marginTop: '20px',
      border: em_border,
    },
    button: {
      backgroundColor: '#007bff',
      color: 'white',
      padding: '10px 20px',
      borderRadius: '5px',
      cursor: 'pointer',
      border: 'none',
      width: '100%',
      maxWidth: '300px',
      fontSize: '1em',
    },
    header_extras_button_wrapper: {
      gap: '20px',
      justifyContent: 'end',
      border: em_border,  
    },
    main_content_container: {
      width: '100%',
      display: 'flex',
      flexDirection: 'column',
      gap: '20px',
      border: em_border,
    },
    navigation_container: {
      width: '100%',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      gap: '20px',
      padding: '0 20px',
      border: em_border,
    },
    pricing_container: {
      border: '1px solid #ddd',
      padding: '20px',
      borderRadius: '8px',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
    },
    pricing_plan: {
      border: '1px solid #ddd',
      padding: '20px',
      borderRadius: '8px',
      textAlign: 'center',
      flex: '1',
      marginBottom: '20px',
      justifyContent: 'space-between',
      // maxWidth: '300px', // Adjust the max width for a better look
    },
    pricing_plan_header: {
      marginBottom: '10px',
    },
    pricing_plan_price: {
      fontSize: '2em',
      fontWeight: 'bold',
    },
    pricing_plan_features: {
      marginTop: '20px',
      fontSize: '0.9em',
      lineHeight: '1.5',
      border: em_border,
    },
    pricing_plan_feature: {
      marginBottom: '5px',
    },
    pricing_section_container: {
      display: 'flex',
      flexDirection: 'column',
      gap: '20px',
      alignItems: 'center',
      marginBottom: '40px',
      border: em_border,
    },
    pricing_section_header: {
      textAlign: 'center',
    },
    pricing_plan_wrapper: {
      display: 'flex',
      gap: '20px',
      flexWrap: 'wrap',
      justifyContent: 'center',
      border: em_border,
    },
    pricing_image: {
      width: '100%',
      height: 'auto',
      borderRadius: '8px',
      marginBottom: '20px',
    },
    super_admin_button: {
      backgroundColor: '#33abff',
      textDecoration: 'none',
      color: 'white',
      padding: '10px 20px',
      borderRadius: '5px',
      cursor: 'pointer',
      border: 'none',
      width: '100%',
      maxWidth: '300px',
      fontSize: '1em',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
    },
    super_admin_button_wrapper: {
      display: 'flex',
      justifyContent: 'center',
      marginTop: '20px',
      border: em_border,
    },
  };


  const handleRegisterClick = () => {
    // Get the pricing section element
    const pricingSection = document.querySelector('.pricing_section_container');

    // Scroll to the pricing section smoothly
    if (pricingSection) {
      pricingSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  return (
    <>
      <ColumnWrapper style={styles.main_container}>
        {/* Header */}
        <RowWrapper style={styles.header_container}>
          
          {/* <RowWrapper style={styles.logo_and_name}>
            <RowWrapper style={styles.saas_name_wrapper}>
              <RowWrapper style={styles.saas_name_school}>
                <Heading3 text='School' style={styles.saas_name_school_text} />
              </RowWrapper>
              <RowWrapper style={styles.saas_name_stream}>
                <Heading3 text='Stream' />
              </RowWrapper>
            </RowWrapper>
          </RowWrapper> */}

          <AiLogo2 style={{ width: '50px', height: '50px' }} />
          <RowWrapper style={styles.navigation_container}>
            <RowWrapper style={styles.navigation_bar_container}>
              <Paragraph style={styles.navigation_bar_texts_style} text='Home' />
              <Paragraph style={styles.navigation_bar_texts_style} text='About Us' />
              <Paragraph style={styles.navigation_bar_texts_style} text='Features' />
              <Paragraph style={styles.navigation_bar_texts_style} text='Register School' />
              <Paragraph style={styles.navigation_bar_texts_style} text='Contact Us' />
            </RowWrapper>
            <RowWrapper style={styles.header_extras_button_wrapper}>
              <PrimaryButton 
                onClick={handleRegisterClick} 
                style={{
                  // backgroundColor: '#007bff',
                  color: 'white',
                  padding: '10px 20px',
                  borderRadius: '5px',
                  cursor: 'pointer',
                  border: 'none',
                  width: '100%',
                  maxWidth: '300px',
                  fontSize: '1em',
                }}>
                Register Your School
              </PrimaryButton>
            </RowWrapper>
          </RowWrapper>
        </RowWrapper>

        {/* Body */}
        <RowWrapper style={styles.body_container}>
          {/* Side Body */}
          <ColumnWrapper style={styles.side_body_container}>
            <Heading3 text='Quick Links' />
            <Paragraph text='Student Portal' />
            <Paragraph text='Teacher Login' />
            <Paragraph text='Admin Dashboard' />
            <Paragraph text='Support' />
            <Paragraph text='FAQs' />
          </ColumnWrapper>

          {/* Main Body */}
          <ColumnWrapper style={styles.main_content_container}>
            {/* Hero Section */}
            <ColumnWrapper style={styles.section_container}>
              <Heading1 text='Welcome to SchoolStream' />
              <Heading2 text='Your all-in-one school management system.' />
              <Paragraph text='SchoolStream is your all-in-one school management system designed to make administration seamless and efficient.' />
              <Paragraph text='Simplify your school operations and enhance student engagement with our comprehensive suite of features.' />
            </ColumnWrapper>

            {/* Features Section */}
            <ColumnWrapper style={styles.section_container}>
              <Heading2 text='Key Features' />
              <RowWrapper style={styles.row_wrapper}>
                <ColumnWrapper style={styles.feature_card}>
                  <Heading4 text='Student Information Management' />
                  <Paragraph text='Centralize and manage student data, including demographics, attendance, grades, and more.' />
                </ColumnWrapper>
                <ColumnWrapper style={styles.feature_card}>
                  <Heading4 text='Attendance Tracking' />
                  <Paragraph text='Track student attendance, analyze trends, and generate reports for improved accountability.' />
                </ColumnWrapper>
              </RowWrapper>
              <RowWrapper style={styles.row_wrapper}>
                <ColumnWrapper style={styles.feature_card}>
                  <Heading4 text='Gradebook and Reporting' />
                  <Paragraph text='Effortlessly manage grades, generate detailed reports, and provide insightful performance analysis.' />
                </ColumnWrapper>
                <ColumnWrapper style={styles.feature_card}>
                  <Heading4 text='Online Assignments' />
                  <Paragraph text='Create, assign, and grade assignments online, fostering student engagement and providing real-time feedback.' />
                </ColumnWrapper>
              </RowWrapper>
              <RowWrapper style={styles.row_wrapper}>
                <ColumnWrapper style={styles.feature_card}>
                  <Heading4 text='Parent Communication Portal' />
                  <Paragraph text='Connect with parents seamlessly through a dedicated portal, enabling communication, information sharing, and collaboration.' />
                </ColumnWrapper>
              </RowWrapper>
            </ColumnWrapper>

            {/* Benefits Section */}
            <ColumnWrapper style={styles.section_container}>
              <Heading2 text='Why Choose SchoolStream?' />
              <Paragraph text='SchoolStream empowers educators and administrators to streamline their workflows, enhance student outcomes, and foster a collaborative learning environment.' />
              <RowWrapper style={styles.row_wrapper}>
                <ColumnWrapper style={{ border: em_border }}>
                  <Heading5 text='Seamless Integration' />
                  <Paragraph text='Effortlessly integrate with existing school systems and platforms for a unified and streamlined experience.' />
                </ColumnWrapper>
                <ColumnWrapper style={{ border: em_border }}>
                  <Heading5 text='User-Friendly Interface' />
                  <Paragraph text='Intuitive design and easy navigation make SchoolStream accessible to users of all technical abilities.' />
                </ColumnWrapper>
                <ColumnWrapper style={{ border: em_border }}>
                  <Heading5 text='Exceptional Support' />
                  <Paragraph text='Our dedicated support team is here to assist you every step of the way, ensuring a smooth and successful implementation.' />
                </ColumnWrapper>
              </RowWrapper>
            </ColumnWrapper>

            {/* Testimonials Section */}
            <ColumnWrapper style={styles.section_container}>
              <Heading2 text='What Our Users Say' />
              <RowWrapper style={styles.row_wrapper}>
                <ColumnWrapper style={styles.testimonial_card}>
                  <Paragraph style={styles.testimonial_quote}
                    text='"SchoolStream has revolutionized the way we manage our school. The intuitive interface and robust features have made our daily tasks much more efficient."' />
                  <Paragraph style={styles.testimonial_author} text='John Smith, Principal, ABC High School' />
                </ColumnWrapper>
                <ColumnWrapper style={styles.testimonial_card}>
                  <Paragraph style={styles.testimonial_quote}
                    text='"As a teacher, I appreciate the ease with which I can create and grade assignments online. The feedback system helps my students stay engaged and on track."' />
                  <Paragraph style={styles.testimonial_author} text='Jane Doe, English Teacher, XYZ Elementary School' />
                </ColumnWrapper>
              </RowWrapper>
            </ColumnWrapper>

            {/* Call to Action */}
            <ColumnWrapper style={styles.section_container}>
              <Paragraph text='Ready to transform your school? Get started with SchoolStream today!' />
              {/* <RowWrapper style={styles.button_wrapper}>
                <button style={styles.button}>Register Your School</button>
              </RowWrapper> */}
            </ColumnWrapper>


            {/* Pricing Section */}
            <ColumnWrapper className="pricing_section_container" style={styles.pricing_section_container}>
              <Heading2 style={styles.pricing_section_header} text='Pricing' />
              {/* <img src="path/to/your/pricing-image.jpg" alt="Pricing Image" style={styles.pricing_image} /> */}
              <RowWrapper style={styles.pricing_plan_wrapper}>
                
                <ColumnWrapper style={styles.pricing_plan}>
                  <ColumnWrapper style={{border: em_border}}>
                      <Heading3 text='Free' style={styles.pricing_plan_header} />
                      <Paragraph style={styles.pricing_plan_price} text='0 Birr' />
                      <ColumnWrapper style={styles.pricing_plan_features}>
                        <Paragraph style={styles.pricing_plan_feature} text='Limited Features' />
                        <Paragraph style={styles.pricing_plan_feature} text='Basic Student Information' />
                        <Paragraph style={styles.pricing_plan_feature} text='Limited Parent Communication' />
                        <Paragraph style={styles.pricing_plan_feature} text='No Support' />
                      </ColumnWrapper>                  
                  </ColumnWrapper>

                  <PrimaryButton>Start Free</PrimaryButton>
                </ColumnWrapper>

                <ColumnWrapper style={styles.pricing_plan}>
                  <ColumnWrapper style={{border: em_border}}>
                      <Heading3 text='Standard' style={styles.pricing_plan_header} />
                      <Paragraph style={styles.pricing_plan_price} text='500 Birr/Month' />
                      <ColumnWrapper style={styles.pricing_plan_features}>
                        <Paragraph style={styles.pricing_plan_feature} text='All Free Features' />
                        <Paragraph style={styles.pricing_plan_feature} text='Enhanced Student Information' />
                        <Paragraph style={styles.pricing_plan_feature} text='Expanded Parent Communication' />
                        <Paragraph style={styles.pricing_plan_feature} text='Email Support' />
                      </ColumnWrapper>
                  </ColumnWrapper>

                  <PrimaryButton>Choose Standard</PrimaryButton>
                </ColumnWrapper>


                <ColumnWrapper style={styles.pricing_plan}>

                  <ColumnWrapper style={{border: em_border}}>
                      <Heading3 text='Premium' style={styles.pricing_plan_header} />
                      <Paragraph style={styles.pricing_plan_price} text='1,000 Birr/Month' />
                      <ColumnWrapper style={styles.pricing_plan_features}>
                        <Paragraph style={styles.pricing_plan_feature} text='All Standard Features' />
                        <Paragraph style={styles.pricing_plan_feature} text='Advanced Reporting' />
                        <Paragraph style={styles.pricing_plan_feature} text='Customizable Modules' />
                        <Paragraph style={styles.pricing_plan_feature} text='Priority Support' />
                      </ColumnWrapper>
                  </ColumnWrapper>

                  <PrimaryButton>Go Premium</PrimaryButton>
                </ColumnWrapper>
              </RowWrapper>
            </ColumnWrapper>
            {/* Super Admin Dashboard Button (for development) */}
            <RowWrapper style={styles.super_admin_button_wrapper}>
              <Link to="/admin/home" style={styles.super_admin_button}>
                Super Admin Dashboard
              <FontAwesomeIcon icon="fa-solid fa-arrow-right" style={styles.super_admin_icon} />
              </Link>
            </RowWrapper>
          </ColumnWrapper>
          
        </RowWrapper>
        

        {/* Footer */}
        <RowWrapper style={styles.footer_container}>
          <Paragraph text='© 2024 SchoolStream. All rights reserved.' style={{ color: 'white' }} />
          <Paragraph text='Contact Us' style={{ color: 'white' }} />
          <Paragraph text='About Us' style={{ color: 'white' }} />
          <Paragraph text='Privacy Policy | Terms of Service' style={{ color: 'white' }} />
        </RowWrapper>
      </ColumnWrapper>
    </>
  );
}

export default Home;// admin_dashboard.jsx
import React, { useEffect, useState } from 'react';
import { Link, Outlet, useNavigate } from 'react-router-dom'
import RowWrapper from '../../components/row_wrapper';
import ColumnWrapper from '../../components/column_wrapper';
import { AiLogo, AiLogo2, AiLogo3 } from '../../components/ems_logo';
import circle8175 from '../../assets/circle8175.png';
import { Heading3, Heading4, Heading5, Label } from '../../components/Typography';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useLocation } from 'react-router-dom';
import '../../styles/admin_dashboard.css'
import LogoAndName from '../../components/LogoAndName';

import { useSelector,useDispatch } from 'react-redux';
import { logout } from '../../store';
import { color } from 'chart.js/helpers';

library.add(fas);

function AdminDashboard() {

  const homePage = '/admin/home';
  const schoolPage = '/admin/school/listing/all';
  const schoolPageCheck = '/admin/school';
  const usersPage = '/admin/users/overview';
  const usersPageCheck = '/admin/users';
  const reportPage = '/admin/report';
  const profilePage = '/admin/profile';
  const settingsPage = '/admin/settings';
  const helpPage = '/admin/help';

  const location = useLocation();

  const currentLocation = location.pathname;

  const onHomePage  = (currentLocation.startsWith(homePage));
  const onSchoolPage = (currentLocation.startsWith(schoolPageCheck));
  const onUsersPage = (currentLocation.startsWith(usersPageCheck));
  const onReportPage = (currentLocation.startsWith(reportPage));
  const onProfilePage = (currentLocation.startsWith(profilePage));
  const onSettingsPage = (currentLocation.startsWith(settingsPage));
  const onHelpPage = (currentLocation.startsWith(helpPage));


  // Theme setter

  const [theme, setTheme] = useState('light');

  const dispatch = useDispatch();
  
  // const uname = useSelector((state) => state.auth.username);
  const uname2 = localStorage.getItem('username');
  // console.log(uname2)
    
  const [visibleNav,setVisibleNav] = useState(0);
  const navigate = useNavigate();

  const { state } = useLocation();

  // const username = (state && "@"+state.username) || "Admin"; 
  const username = (uname2 && "@"+uname2) || "Admin"; 

  const handleLogout = () => {
    dispatch(logout())
    localStorage.removeItem('jwt');
    navigate('/auth/login');
  }

  const themeToggleHandler = () => {
    theme === 'light'?setTheme('dark'):setTheme('light')
  }

  const styles = {
    main_container: {
      minHeight: '100vh',
      // background:'#09f1',
      padding: '5px'
    },

    nav_buttons_style: {
      width: '100%',
      height: '100vh',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'start',
      gap: '10px',
    },

    home_nav_button_style: {
      gap: '10px',
      // justifyContent: 'start',
      justifyContent: 'space-between',
      // justifyContent: 'center',
      alignItems: 'center',
      padding: '10px',
      borderRadius: '5px',
      cursor: 'pointer',
      border: 'none',
      // boxShadow: '3px 3px 5px 0px #0088ff23',
      width: !visibleNav && '120px',
      // fontWeight: 'lighter',
      // background: 'red',
      currentPage: {
        background: 'rgba(200,0,0,0.04)',
        color: 'rgba(200,0,0,1)',
      }
    },
    logout_nav_button_style: {
      gap: '5px',
      justifyContent: 'space-between',
      alignItems: 'center',
      padding: '10px',
      borderRadius: '5px',
      cursor: 'pointer',
      width: !visibleNav && '120px',
      borderColor: 'rgba(200,0,0,1)',
      background: 'rgba(200,0,0,0.04)',
      opacity: '90%',
    },

    header_styles: {
      // background:'#F0FBFF',
      // background: 'white',
      // background: 'red',
      border:'none',
      boxShadow:'0 4px 8px 0 rgba(0, 170, 230, 0.012)',
      // borderRadius: '7px '
    },

    header_user_notification:{
      width: '100%',
      gap: '10px',
      justifyContent: 'end',
      alignItems: 'center',
      border:'none',
    },

    user_icon: {
      fontSize: '1.5rem',
      background: '#0088ff',
      padding: '8px',
      borderRadius: '50%',
      color: 'white',
      width: '30px',
      height: '30px',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
    },

    user_icon_image: {
      fontSize: '1.5rem',
      background: '#0088ff',
      padding: '2px',
      borderRadius: '50%',
      color: 'white',
      width: '38px',
      height: '38px',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
    },

    nav_bar_container :{
      minHeight: '80vh',
      // boxShadow: '3px 3px 5px 0px #0088ff23',
      // borderRadius: '10px',
      gap: '20px',
      background: '#fff',
      // background: 'red',
      border: 'none'
    },

    main_content_area:{
      width: '100%',
      border:'none',
      // background: 'white',
      backgroundImage: 'linear-gradient(45deg,rgba(0,170,255,0.1),rgba(0,170,255,0.07))',
      borderRadius: '30px',
      padding: '20px',
      gap: '10px',
      boxShadow: '3px 3px 5px 0px #0088ff23',
      height: '76.6vh',
      overflowY: 'scroll',
      // background: 'red',
      marginTop: '10px',
      marginRight: '10px',
    },

    user_details:{
      // border: 'none',
      borderRadius: '10px',
      gap: '10px',
      alignItems: 'center',
      padding: '5px',
      cursor: 'pointer',
      background: 'rgba(0,180,250,0.15)',
    },

    username_styles:{
      opacity: '100%',
      // fontSize: '1.2rem',
      // fontWeight: '700',
      color: '#383861',
      fontStyle: 'italic',
      // fontWeight: '700'
    },

    navigation_button_styles:{
      // background: 'red',
      height: '100%',
      justifyContent: 'space-between',
      border: 'none'
    },
    main_content_container:{ 
      gap: '10px', 
      border:'none', 
      padding: '0', 
      paddingRight: '0', 
      paddingLeft: '0',
      // background: 'red',
      // background: 'rgba(0,0,0,0.1)',
      background: 'white',
    },
    logo_wrapper: {
      width: '100px',
      justifyContent: 'center',
      alignItems: 'center',
      border: 'none',
    },
    searchWrapper: {
      width: '280px',
      borderRadius: '40px',
      justifyContent: 'end',
      alignItems: 'center',
      // paddincg: '0',
      height: '40px',
      padding: '2px'
      // border: 'none',

      // boxShadow: '0px 0px 20px 0px rgba(0,136,255,0.2)',
      // border: '1px solid #e8e8e8',
    },
    searchInput: {
      borderRadius: '20px',
      fontSize: '0.8rem',
      // width: '100%',
      width: '300px',
      height: '60%',
      border: 'none',
      background: 'white',
      // padding: '2px'
    },
    searchIcon: {
      padding: '10px',
      borderRadius: '20px',
      // background: '#0088ff',
      // background: '#e8e8e8',
      background: 'rgba(0,141,218,0.08)',
      // background: 'rgba(255,255,255,1)',
      color: 'rgba(0,141,218,1)',
      cursor: 'pointer',
      width: '20px',
      height: '20px',
      position: 'relative',
      // left: '-20px',
    },
    search_wrapper_container_style:{ 
      width: '100%', 
      height: '100%', 
      border:'none',
      alignItems: 'center'
    },
    light_dark_toggle: {
      // background: 'red',
      height: '100%',
      justifyContent: 'center',
      alignItems: 'center',
      border: 'none',
    },
    dark_light_toggle_button_style: {
      // border: 'none',
      padding: '0px',
      alignItems: 'center',
      justifyContent: theme ==='light'?'end':'start',
      borderRadius: '20px',
      height: '18px',
      width: '40px',
      background: 'white',
      cursor: 'pointer'
    },
    moon_sun_button_styles: {
      width: '20px',
      height: '20px',
      background: 'black',
      borderRadius: '20px',
      padding: '2px',
      display: 'flex',
      fontSize: '0.1rem',
      alignItems: 'center',
      justifyContent: 'center',
      color: theme === 'light'?'rgba(250,250,220,1)':'rgba(220,250,255,1)'
    }

  }

  // const location = useLocation();

  useEffect(()=> {
    (location.pathname === '/admin' || location.pathname === '/admin/')&&navigate('/admin/home');
  },[])
  return (
    <div style={styles.main_container}>
      {/* Header */}
      <RowWrapper style={styles.header_styles}>
        <RowWrapper style={styles.logo_wrapper}>
            {username === '@lati' ? <AiLogo2 style={{ width: '50px', height: '50px' }} /> :<AiLogo3 style={{ width: '50px', height: '50px' }} />}
            {/* <LogoAndName /> */}
        </RowWrapper>

        <RowWrapper style={{ alignItems: 'center', width: '100%', border:'none'}}>
          <RowWrapper style={{ width: '100%',border:'none' }}>
            <Heading5 text="Admin Dashboard" style={{ fontWeight: '600' }} />
            {/* <Heading3 text="Admin Dashboard" style={{ fontSize: '1.82rem', fontWeight: '700' }} /> */}
          </RowWrapper>
          <RowWrapper style={{ width: '100%',border:'none'}}>
            {/* <Label text="Welcome to the Admin Dashboard." /> */}
          </RowWrapper>

          <RowWrapper style={styles.search_wrapper_container_style}>
              <RowWrapper style={styles.searchWrapper}>
                  <input type="text" placeholder="Search from here..." style={styles.searchInput}/>
                  <FontAwesomeIcon
                      icon="fa-solid fa-search"
                      color="#fff"
                      onClick={() => {
                        alert('hi');
                      }}
                      style={styles.searchIcon}
                    />
                </RowWrapper>
          </RowWrapper>

          <RowWrapper style={styles.light_dark_toggle}>
              <RowWrapper style={styles.dark_light_toggle_button_style} onClick={themeToggleHandler}>
                {/* <FontAwesomeIcon icon="fa-solid fa-moon" /> */}
                { theme === 'light' ? <FontAwesomeIcon icon="fa-solid fa-sun" style={styles.moon_sun_button_styles}/>:<FontAwesomeIcon icon="fa-solid fa-moon" style={styles.moon_sun_button_styles}/>}
              </RowWrapper>
          </RowWrapper>

          <RowWrapper style={styles.header_user_notification}>
            <FontAwesomeIcon icon="fa-solid fa-message" color='#0088ff' />
            <FontAwesomeIcon icon="fa-solid fa-bell" />
            <RowWrapper style={styles.user_details}>
              <span style={styles.username_styles}>
                {username}
              </span>
              {(username === '@lati') ? <img src={circle8175} style={styles.user_icon_image} /> : <FontAwesomeIcon icon="fa-solid fa-user" style={styles.user_icon} />}
              {/* <FontAwesomeIcon icon="fa-solid fa-user" style={styles.user_icon} /> */}
            </RowWrapper>
          </RowWrapper>
        </RowWrapper>
      </RowWrapper>
     
      {/* Main Content Part */}
      <RowWrapper style={styles.main_content_container}>
        {/* Navigation Bar (Vertical Bar) */}
        <ColumnWrapper style={styles.nav_bar_container}>
          <RowWrapper
            style={{
              justifyContent: 'end',
              border: 'none'
            }}>
            <ColumnWrapper 
            onClick={()=>{visibleNav == 0?setVisibleNav(1):setVisibleNav(0)}}
            style={{
              cursor:'pointer',
              border: 'none'
            }}>
            <FontAwesomeIcon icon={visibleNav==0?"fa-solid fa-arrow-left":"fa-solid fa-arrow-right"} color='#383861'/>

            </ColumnWrapper>
          </RowWrapper>

          {/* Navigation Buttons */}

          <ColumnWrapper style={styles.navigation_button_styles}>

              {[
                {linkTo: homePage, icon: 'fa-house', label: 'Home', styleClassName: onHomePage && 'onPage'},
                {linkTo: schoolPage, icon: 'fa-school', label: 'School', styleClassName: onSchoolPage && 'onPage'},
                {linkTo: usersPage, icon: 'fa-users', label: 'Users', styleClassName: onUsersPage && 'onPage'},
                {linkTo: reportPage, icon: 'fa-file-alt', label: 'Reports', styleClassName: onReportPage && 'onPage'},
                {linkTo: profilePage, icon: 'fa-user', label: 'Profile', styleClassName: onProfilePage && 'onPage'},
                {linkTo: settingsPage, icon: 'fa-cog', label: 'Settings', styleClassName: onSettingsPage && 'onPage'},
                {linkTo: helpPage, icon: 'fa-question', label: 'Help', styleClassName: onHelpPage && 'onPage'},
              ].map((navInfo) => (
                <Link to={navInfo.linkTo} style={{textDecoration: 'none'}}>
                  <RowWrapper style={styles.home_nav_button_style}>
                    <FontAwesomeIcon icon={`fa-solid ${navInfo.icon}`} color='#383861' className={navInfo.styleClassName}/>
                    <Label text={visibleNav==0?navInfo.label:''} className2={navInfo.styleClassName} />
                  </RowWrapper>
                </Link>    
              ))}
            
            <RowWrapper style={styles.logout_nav_button_style}
              onClick={handleLogout}>
              <FontAwesomeIcon icon="fa-solid fa-sign-out-alt" color='rgba(200,0,0,1)' />
              <Label text={visibleNav==0?'Logout':''} style={{ color: 'rgba(200,0,0,1)', fontWeight: '700' }} />
            </RowWrapper>

          </ColumnWrapper>

        </ColumnWrapper>

        <ColumnWrapper style={styles.main_content_area}>
          {/* Admin Content View */}
          <Outlet />
        </ColumnWrapper>

      </RowWrapper>
    </div>
  );
}

export default AdminDashboard;
// admin_dashboard.jsx
import React, { useState } from 'react';
import { Link, Outlet, useNavigate } from 'react-router-dom'
import RowWrapper from '../../components/row_wrapper';
import ColumnWrapper from '../../components/column_wrapper';
import { AiLogo } from '../../components/ems_logo';
import circle8175 from '../../assets/circle8175.png';
import { Heading3,Heading6, Label } from '../../components/Typography';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useLocation } from 'react-router-dom';

import { useSelector } from 'react-redux';

library.add(fas);

function AdminDashboard() {


const uname = useSelector((state) => state.auth.username);
const uname2 = localStorage.getItem('username');
// console.log(uname2)
  
const [visibleNav,setVisibleNav] = useState(0);
const navigate = useNavigate();

const { state } = useLocation();

// const username = (state && "@"+state.username) || "Admin"; 
const username = (uname2 && "@"+uname2) || "Admin"; 

  const handleLogout = () => {
    localStorage.removeItem('jwt');
    navigate('/auth/login');
  }

  const styles = 
  {
  nav_buttons_style: {
    width: '100%',
    height: '100vh',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'start',
    gap: '10px',
  },
  home_nav_button_style: {
    gap: '10px',
    // justifyContent: 'start',
    justifyContent: 'space-between',
    // justifyContent: 'center',
    alignItems: 'center',
    padding: '10px',
    borderRadius: '5px',
    cursor: 'pointer',
    border: 'none',
    boxShadow: '3px 3px 5px 0px #0088ff23',
    width: !visibleNav && '150px',
    // background: 'red',
  },
  header_styles: {
    // background:'#F0FBFF',
    background: 'white',
    border:'none',
    boxShadow:'0 4px 8px 0 rgba(0, 170, 230, 0.012)',
    borderRadius: '7px '
  },

  header_user_notification:{
    width: '100%',
    gap: '10px',
    justifyContent: 'end',
    alignItems: 'center',
    border:'none',
  },
  user_icon: {
    fontSize: '1.5rem',
    background: '#0088ff',
    padding: '8px',
    borderRadius: '50%',
    color: 'white',
    width: '30px',
    height: '30px',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },

  user_icon_image: {
    fontSize: '1.5rem',
    background: '#0088ff',
    padding: '2px',
    borderRadius: '50%',
    color: 'white',
    width: '38px',
    height: '38px',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  nav_bar_container :{
    minHeight: '80vh',
    boxShadow: '3px 3px 5px 0px #0088ff23',
    borderRadius: '10px',
    gap: '20px',
    background: '#fff',
    // background: 'red',
    border: 'none'
  },
  main_content_area:{
    width: '100%',
    border:'none',
    background: 'white',
    borderRadius: '10px',
    padding: '20px',
    gap: '10px',
    boxShadow: '3px 3px 5px 0px #0088ff23',
    height: '76.6vh',
    overflowY: 'scroll',
    // background: 'red'
 },
 user_details:{
  // border: 'none',
  borderRadius: '10px',
  gap: '10px',
  alignItems: 'center',
  padding: '5px',
  cursor: 'pointer',
  background: 'rgba(0,180,250,0.15)',
 },
 username_styles:{
    opacity: '100%',
    // fontSize: '1.2rem',
    // fontWeight: '700',
    color: '#383861',
    fontStyle: 'italic',
    // fontWeight: '700'
  },
  navigation_button_styles:{
    // background: 'red',
    height: '100%',
    justifyContent: 'space-between',
    border: 'none'
  },
}

  return (
    <div style={{
      minHeight: '100vh',
      background:'#09f1',
      padding: '5px'
      }}>
      {/* Header */}
      <RowWrapper style={styles.header_styles}>
        <AiLogo style={{ width: '80px' }} />
        <RowWrapper style={{ width: '100%',border:'none'}}>
          <RowWrapper style={{ width: '100%',border:'none' }}>
            <Heading3 text="Admin Dashboard" style={{ fontSize: '2rem' }} />
          </RowWrapper>
          <RowWrapper style={{ width: '100%',border:'none'}}>
            <Label text="Welcome to the Admin Dashboard. Here you can manage all the activities related to the EMS." />
          </RowWrapper>
          <RowWrapper style={styles.header_user_notification}>
            <FontAwesomeIcon icon="fa-solid fa-message" color='#0088ff' />
            <FontAwesomeIcon icon="fa-solid fa-bell" />
            <RowWrapper style={styles.user_details}>
              <span style={styles.username_styles}>
                {username}
              </span>
              {(username === '@lati') ? <img src={circle8175} style={styles.user_icon_image} /> : <FontAwesomeIcon icon="fa-solid fa-user" style={styles.user_icon} />}
              {/* <FontAwesomeIcon icon="fa-solid fa-user" style={styles.user_icon} /> */}
            </RowWrapper>
          </RowWrapper>
        </RowWrapper>
      </RowWrapper>
      {/* Main Content Part */}
      <RowWrapper style={{ gap: '10px', border:'none', paddingRight: '0', paddingLeft: '0' }}>
        <ColumnWrapper style={styles.nav_bar_container}>
          <RowWrapper
            style={{
              justifyContent: 'end',
              border: 'none'
            }}>
            <ColumnWrapper 
            onClick={()=>{visibleNav == 0?setVisibleNav(1):setVisibleNav(0)}}
            style={{
              cursor:'pointer',
              border: 'none'
            }}>
            <FontAwesomeIcon icon={visibleNav==0?"fa-solid fa-arrow-left":"fa-solid fa-arrow-right"} color='#383861'/>

            </ColumnWrapper>
          </RowWrapper>

          {/* Navigation Buttons */}

          <ColumnWrapper style={styles.navigation_button_styles}>
          {[
            {linkTo: '/admin/home', icon: 'fa-house', label: 'Home'},
            {linkTo: '/admin/school/listing/all', icon: 'fa-school', label: 'School'},
            {linkTo: '/admin/users', icon: 'fa-users', label: 'Users'},
            {linkTo: '/admin/report', icon: 'fa-file-alt', label: 'Reports'},
            {linkTo: '/admin/profile', icon: 'fa-user', label: 'Profile'},
            {linkTo: '/admin/settings', icon: 'fa-cog', label: 'Settings'},
            {linkTo: '/admin/help', icon: 'fa-question', label: 'Help'},
          ].map((navInfo) => (
            <Link to={navInfo.linkTo} style={{textDecoration: 'none'}}>
              <RowWrapper style={styles.home_nav_button_style}>
                <FontAwesomeIcon icon={`fa-solid ${navInfo.icon}`} color='#383861' />
                <Label text={visibleNav==0?navInfo.label:''} style={{ color: '#383861', fontWeight: '700' }} />
              </RowWrapper>
            </Link>    
          ))}
            <Link to={'/admin/home'} style={{textDecoration: 'none'}}>
              <RowWrapper style={styles.home_nav_button_style}>
                <FontAwesomeIcon icon="fa-solid fa-house" color='#383861' />
                <Label text={visibleNav==0?'Home':''} style={{ color: '#383861', fontWeight: '700' }} />
              </RowWrapper>
            </Link>

            <Link to={'/admin/school/listing/all'} style={{textDecoration: 'none'}}>
              <RowWrapper style={styles.home_nav_button_style}>          
                <FontAwesomeIcon icon="fa-solid fa-school" color='#383861' />
                <Label text={visibleNav==0?'Schools':''} style={{ color: '#383861', fontWeight: '700' }} />
              </RowWrapper>
            </Link>

            <Link to={'/admin/users'} style={{textDecoration: 'none'}}>
              <RowWrapper style={styles.home_nav_button_style}>
                <FontAwesomeIcon icon="fa-solid fa-users" color='#383861' />
                <Label text={visibleNav==0?'Users':''} style={{ color: '#383861', fontWeight: '700' }} />
              </RowWrapper>
            </Link>

            <Link to={'/admin/report'} style={{textDecoration: 'none'}}>
              <RowWrapper style={styles.home_nav_button_style}>
                <FontAwesomeIcon icon="fa-solid fa-file-alt" color='#383861' />
                <Label text={visibleNav==0?'Reports':''} style={{ color: '#383861', fontWeight: '700' }} />
              </RowWrapper>
            </Link>

            <Link to={'/admin/profile'} style={{textDecoration: 'none'}}>
              <RowWrapper style={styles.home_nav_button_style}>
                <FontAwesomeIcon icon="fa-solid fa-user" color='#383861' />
                <Label text={visibleNav==0?'Profile':''} style={{ color: '#383861', fontWeight: '700' }} />
              </RowWrapper>
            </Link>

            <Link to={'/admin/settings'} style={{textDecoration: 'none'}}>
              <RowWrapper style={styles.home_nav_button_style}>
                <FontAwesomeIcon icon="fa-solid fa-cog" color='#383861' />
                <Label text={visibleNav==0?'Settings':''} style={{ color: '#383861', fontWeight: '700' }} />
              </RowWrapper>
            </Link>

            <Link to={'/admin/help'} style={{textDecoration: 'none'}}>          
              <RowWrapper style={styles.home_nav_button_style}>
                <FontAwesomeIcon icon="fa-solid fa-question" color='#383861' />
                <Label text={visibleNav==0?'Help':''} style={{ color: '#383861', fontWeight: '700' }} />
              </RowWrapper>
            </Link>

            {/* <Link to={'/auth/login'} style={{textDecoration: 'none'}}>
              <RowWrapper style={styles.home_nav_button_style}>
                <FontAwesomeIcon icon="fa-solid fa-sign-out-alt" color='#383861' />
                <Label text={visibleNav==0?'Logout':''} style={{ color: '#383861', fontWeight: '700' }} />
              </RowWrapper>
            </Link> */}

            <RowWrapper style={styles.home_nav_button_style}
              onClick={handleLogout}>
              <FontAwesomeIcon icon="fa-solid fa-sign-out-alt" color='#383861' />
              <Label text={visibleNav==0?'Logout':''} style={{ color: '#383861', fontWeight: '700' }} />
            </RowWrapper>
          </ColumnWrapper>
        </ColumnWrapper>

        <ColumnWrapper style={styles.main_content_area}>
          <Outlet />
        </ColumnWrapper>
      </RowWrapper>

      <style>
        {`
        body{
          background: #f0fbff;
        }
          RowWrapper {
           background: red;
          }
        `}
      </style>
    </div>
  );
}

export default AdminDashboard;
import React, { useEffect, useState } from 'react';
import ColumnWrapper from '../../../../components/column_wrapper';
import RowWrapper from '../../../../components/row_wrapper';
import { Heading3, Label } from '../../../../components/Typography';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { library } from '@fortawesome/fontawesome-svg-core';
import { SecondaryButton } from '../../../../components/buttons';
import { Link, Outlet, useLocation } from 'react-router-dom';

library.add(fas);

function OverviewPages() {

  const location = useLocation();
  const onPrincipalPage = (location.pathname.startsWith('/admin/users/overview/principal'))
  const onSupervisorPage = (location.pathname.startsWith('/admin/users/overview/supervisor'))
  const onTeacherPage = (location.pathname.startsWith('/admin/users/overview/teacher'))
  const onStudentPage = (location.pathname.startsWith('/admin/users/overview/student'))
  const onParentPage = (location.pathname.startsWith('/admin/users/overview/parent'))

  const [hoveredButton, setHoveredButton] = useState(null);

  const handleMouseEnter = (button) => {
    setHoveredButton(button);
  };

  const handleMouseLeave = () => {
    setHoveredButton(null);
  };

  const styles = {
    main_container: {
      height: '100vh',
      border: 'none',
      gap: '20px',
      padding: '20px',
      // background: 'white',
      // borderRadius: '5px',
      // boxShadow: '3px 3px 5px 0px #0088ff23',
    },
    users_overview_container: {
      gap: '10px',
      justifyContent: 'space-around',
      alignItems: 'center',
      padding: '10px',
      borderRadius: '5px',
      border: 'none',
    },
    user_management_container: {
      gap: '10px',
      padding: '10px',
      borderRadius: '15px',
      background: 'white',
      // border: 'none',
    },
    users_type_list_container:{
      justifyContent: 'center',
      alignItems: 'center',
      boxShadow: '3px 3px 5px 0px #0088ff23',
      flex: '1',
      gap: '20px',
      border: 'none',
    },
    users_navigation_bar_container: {
      // justifyContent: 'space-between',
      alignItems: 'center',
      flex: '1',
      gap: '20px',
      // border: 'none',
      // justi
    },
    users_management_section_container: {
      // background: 'red',
      width: '100%',
      // height: '100%',
      border: 'none',
      borderRadius: '15px',
      padding: '20px',
      // boxShadow: '3px 3px 5px 0px #0088ff23',
    },
  };

  const overviewCards = [
    { border: '#DAA520', background: /*localStorage.getItem('username') === 'lati'?'rgba(102,102,102,1)':*/'#DAA52023', number: '300', text: 'Principals' },
    { border: '#4682B4', background: /*localStorage.getItem('username') === 'lati'?'rgba(102,102,102,1)':*/'#4682B423', number: '500', text: 'Teachers' },
    { border: '#32CD32', background: /*localStorage.getItem('username') === 'lati'?'rgba(102,102,102,1)':*/'#32CD3223', number: '1000', text: 'Students' },
    { border: '#FF6347', background: /*localStorage.getItem('username') === 'lati'?'rgba(102,102,102,1)':*/'#FF634723', number: '150', text: 'Parent Users' },
  ];

  // useEffect(() => {
  //   if (onPrincipalPage || onSupervisorPage || onTeacherPage || onStudentPage || onParentPage) {
  //       window.scrollTo(0, 20);
  //   }
  // },[])

  return (
    <div>
      <ColumnWrapper style={styles.main_container}>
        <Heading3 text="Users Overview" />
        <ColumnWrapper style={
          { 
            // gap: '10px', 
            padding: '10px', 
            borderRadius: '15px', 
            background: 'white',
            border: 'none' 

          }}>

          {/* <Label text="View Details" /> */}
          <RowWrapper style={styles.users_overview_container}>
            {overviewCards.map((cardInfo, index) => (
              <ColumnWrapper
                key={index}
                style={{
                  width: '20%',
                  height: '100px',
                  justifyContent: 'center',
                  alignItems: 'center',
                  // boxShadow: '3px 3px 5px 0px #0088ff23',
                  borderRadius: '10px',
                  background: cardInfo.background,
                  gap: '20px',
                  border: `2px solid ${cardInfo.border}`,
                }}>
                <Heading3 text={cardInfo.number} style={{ /*color: 'white',*/ fontWeight: 'bold' }} />
                <Label text={cardInfo.text} style={{ /*color: 'white',*/ fontWeight: 'bold' }} />
              </ColumnWrapper>
            ))}

        </RowWrapper>

        
      </ColumnWrapper>

      <RowWrapper
          style={styles.user_management_container}>

          <ColumnWrapper
            style={styles.users_type_list_container}>
            <Heading3 text="Users" />
            <ColumnWrapper style={styles.users_management_section_container}>

                <RowWrapper style={styles.users_navigation_bar_container}>

                  <Link to='/admin/users/overview/principal'> 
                    <button className={'schoolButtonStyle all-schools '+ (onPrincipalPage && 'selected-button')}>
                      Principal
                    </button>
                  </Link>
                  <Link to='/admin/users/overview/supervisor'> 
                    <button className={'schoolButtonStyle active-schools '+ (onSupervisorPage && 'selected-button')}>
                      Supervisor
                    </button>
                  </Link>
                  <Link to='/admin/users/overview/teacher'> 
                    <button className={'schoolButtonStyle pending-schools '+ (onTeacherPage && 'selected-button')}>
                      Teacher
                    </button>
                  </Link>
                  <Link to='/admin/users/overview/student'> 
                    <button className={'schoolButtonStyle deleted-schools '+ (onStudentPage && 'selected-button')}>
                      Student
                    </button>
                  </Link>
                  <Link to='/admin/users/overview/parent'> 
                    <button className={'schoolButtonStyle archived-schools '+ (onParentPage && 'selected-button')}>
                      Parent
                    </button>
                  </Link>
                </RowWrapper>

                <ColumnWrapper>
                  {/* This is wherr the list of users will be */}
                  {/* {onPrincipalPage && <h1>Principals</h1>}
                  {onSupervisorPage && <h1>Supervisor</h1>}
                  {onTeacherPage && <h1>Teacher</h1>}
                  {onStudentPage && <h1>Student</h1>}
                  {onParentPage && <h1>Parent</h1>} */}
                  <Outlet />
                </ColumnWrapper>

            </ColumnWrapper>

          </ColumnWrapper>
        </RowWrapper>
      </ColumnWrapper>
    </div>
  );
}

export default OverviewPages;
import React, { useEffect } from 'react'
import { Outlet, useLocation, useNavigate } from 'react-router-dom'
import RowWrapper from '../../../../components/row_wrapper'
import { SecondaryButton } from '../../../../components/buttons';
import { Link } from 'react-router-dom';

function Principal() {
  
  
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(()=> {

    location.pathname === '/admin/users/overview/principal' && navigate('/admin/users/overview/principal/create');

  },[])
  return (
    <>
        {/* <div>Principal</div> */}
        {/* <hr /> */}
        <RowWrapper>
          <Link to={'/admin/users/overview/principal/create/user'}>
            <SecondaryButton>
              Create Principal
            </SecondaryButton>
          </Link>
          <Link to='/admin/users/overview/principal/list'>
            <SecondaryButton>
              Principal Listings
            </SecondaryButton>
          </Link>
        </RowWrapper>
        <Outlet />
    </>
  )
}

export default Principalimport React from 'react'

function Teacher() {
  return (
    <div>Teacher</div>
  )
}

export default Teacherimport React from 'react'

function Parent() {
  return (
    <div>Parent</div>
  )
}

export default Parent;import { Heading3 } from '../../../../../components/Typography';
import ColumnWrapper from '../../../../../components/column_wrapper';

import { Outlet } from 'react-router-dom';

function CreatePrincipal (){

    return (
        <ColumnWrapper style={{
                // width: '30vw', 
                borderRadius: '30px', 
                padding: '30px',
                background: 'white',
                boxShadow: '3px 3px 5px 0px #0088ff23',
                border: 'none'
            }}>
            <Heading3 text="Create Principal"/>
            <Outlet />
        </ColumnWrapper>   
    );
}

export default CreatePrincipal
import React from 'react'

function TestPrincipal() {
  return (
    <div>TestPrincipal</div>
  )
}

export default TestPrincipalimport { Label } from '../../../../../../components/Typography';
import ColumnWrapper from '../../../../../../components/column_wrapper';
import RowWrapper from '../../../../../../components/row_wrapper';
import { HorizontalLine } from '../../../../../../components/line_separator';
import { InputField } from '../../../../../../components/input_field';
import { PrimaryButton } from '../../../../../../components/buttons';
import { useEffect, useState } from 'react';
import Select from 'react-select';
import axios from 'axios';
import { useParams } from 'react-router-dom';

function CreatePrincipalSpecific (props){

    const {user_id} = useParams()

    const userID = {user_id: user_id}
    const [schoolID, setSchoolID] = useState({school_id: ''})
    const [salaryRange, setSalaryRange] = useState({salary_range: ''})
    const [principalType, setPrincipalType] = useState({principal_type: ''})
    
    const [principalData, setPrincipalData] = useState({});

    const [schools, setSchools] = useState([])

    const salaryRanges = [
        { value: "0-20000", label: "0 - 20,000" },
        { value: "20001-40000", label: "20,001 - 40,000" },
        { value: "40001-60000", label: "40,001 - 60,000" },
        { value: "60001-80000", label: "60,001 - 80,000" },
        { value: "80001-100000", label: "80,001 - 100,000" },
        { value: "100001-120000", label: "100,001 - 120,000" },
        { value: "120001-140000", label: "120,001 - 140,000" },
        { value: "140001-160000", label: "140,001 - 160,000" },
        { value: "160001-180000", label: "160,001 - 180,000" },
        { value: "180001-200000", label: "180,001 - 200,000" },
        { value: "200001+", label: "200,001 and above" }
      ];


    const getSchools = async () => {
        try{

            const response = await fetch('http://localhost:3060/api/school/load');
            const data = await response.json();
            setSchools(data);

        }catch(error){
            
            console.error('Error fetching schools:', error);
        }
    }

    useEffect(() => {
        // getAddress();
        // getRole();
        getSchools();
    },[]);

    const handlePrincipalChange = (event) =>{
        const{ name, value } = event.target;
        setPrincipalData((prevData) => ({
            ...prevData,
            [name]:value,
        }))
    }

    const handleGenderChange = (event) => {
        const { value } = event.target;
        setGender({ gender: value });
    };

    // const handleAddressChange = (event) => {
    //     const { value } = event.target;
    //     setAddressId(value);
    // }
    const handleSubmit = async (event) => {
        event.preventDefault();
        try {
            const combinedData = {
                ...principalData,
                ...userID,
                ...schoolID,
                ...salaryRange,
                ...principalType,
                // school_id,
            };
            const response = await axios.post('http://localhost:3060/api/principal/create', combinedData)

            if (response.status === 201) {
                alert(`Principal created succesfully with id ${response.data.id}`);
                console.log('Principal created succesfully',response);
            } else {
                alert('Error Adding Principal');
                console.log('Error Adding Principal');
            }
            console.log(combinedData);

        } catch (error) {
            console.error('Error: ', error);
            if (error.response) {
                console.error('Error details:', error.response.data);
              }
              if (error.response && error.response.status === 500) {
                alert("An internal server error occurred. Please try again later.");
              } else {
                alert("An error occurred while submitting the form. Please check your input and try again.");
              }
        }
    }

    return (
        <>
            <Label text="Enter principal's specific information"/>
            
            <HorizontalLine style={{background: 'rgb(0, 57, 110)',height:'2px' }} />
            
            <form onSubmit={handleSubmit}>

                <ColumnWrapper>
                    <Label text='Principal type' />
                    <Select 
                        placeholder='Select Principal type'
                        options={[
                            {value: 'main', label:'Main'},
                            {value: 'vice', label:'Vice'}
                        ]}
                        onChange={(e) => setPrincipalType(prevState => ({...prevState, principal_type: e.value}))}
                    />
                </ColumnWrapper>

                <ColumnWrapper style={{border: 'none'}}>
                    <Label text="Choose the Principals School" required/>
                        <Select 
                        placeholder="Select School"
                        options={schools.map((school) => ({
                            value: school.school_id,
                            label: school.name,
                        }))}
                        onChange={(e) => setSchoolID(prevState => ({ ...prevState,school_id: e.value}))}/>
                </ColumnWrapper>

                <ColumnWrapper style={{border: 'none'}}>
                    <Label text='Salary Range' />
                    <Select 
                        placeholder='Select the salary range'
                        options={salaryRanges.map((range) => ({
                            value: range.value, label: range.label
                        }))}
                        onChange={(e) => setSalaryRange(prevState => ({...prevState, salary_range: e.value}))}
                    />
                </ColumnWrapper>


                <InputField 
                    labelName="Years of Experience" 
                    placeholder="Enter Years of Experience" 
                    name="experience_years" 
                    type="number" 
                    value={principalData.experience_years} 
                    onChange={handlePrincipalChange} />

                <InputField 
                    labelName="Qualification" 
                    placeholder="Enter Qualification" 
                    name="qualification" 
                    type="text" 
                    value={principalData.qualification} 
                    onChange={handlePrincipalChange} />

                <InputField 
                    labelName="Status" 
                    placeholder="Enter Status" 
                    name="status" 
                    type="text" 
                    value={principalData.status} 
                    onChange={handlePrincipalChange} />

                <InputField 
                    labelName="Office Location" 
                    placeholder="Enter Office Location" 
                    name="office_location" 
                    type="text" 
                    value={principalData.office_location} 
                    onChange={handlePrincipalChange} />

                <InputField 
                    labelName="Bio" 
                    placeholder="Enter Bio" 
                    name="bio" 
                    type="text" 
                    value={principalData.bio} 
                    onChange={handlePrincipalChange} />

                <InputField 
                    labelName="Start Date" 
                    placeholder="Select Start Date" 
                    name="start_date" 
                    type="date" 
                    value={principalData.start_date} 
                    onChange={handlePrincipalChange} />

                <InputField 
                    labelName="Specialization" 
                    placeholder="Enter Specialization" 
                    name="specialization" 
                    type="text" 
                    value={principalData.specialization} 
                    onChange={handlePrincipalChange} />

                <InputField 
                    labelName="Social Media Links" 
                    placeholder="Enter Social Media Links" 
                    name="social_media_links" 
                    type="text" 
                    value={principalData.social_media_links} 
                    onChange={handlePrincipalChange} />

                <InputField 
                    labelName="Education Level" 
                    placeholder="Enter Education Level" 
                    name="education_level" 
                    type="text" 
                    value={principalData.education_level} 
                    onChange={handlePrincipalChange} />

                {/* <ColumnWrapper>
                    <Label text="User" required />
                    <Select 
                        placeholder="Select User"
                        options={userData.map((user) => ({
                            value: user.user_id,
                            label: `${user.first_name} ${user.last_name}`,
                        }))}
                        onChange={(e) => handlePrincipalChange({ target: { name: 'user_id', value: e.value } })} />
                </ColumnWrapper> 
                
                 <ColumnWrapper>
                    <Label text="School" required />
                    <Select 
                        placeholder="Select School"
                        options={schoolData.map((school) => ({
                            value: school.school_id,
                            label: school.school_name,
                        }))}
                        onChange={(e) => handlePrincipalChange({ target: { name: 'school_id', value: e.value } })} />
                </ColumnWrapper> */}

                <RowWrapper style={{ justifyContent: 'flex-end'}}>
                    <PrimaryButton style={{width:'100px', fontWeight: 'normal'}}>Create</PrimaryButton>
                </RowWrapper>

            </form>
        </>
    );
}

export default CreatePrincipalSpecific;
import { Label, Heading6 } from '../../../../../../components/Typography';
import ColumnWrapper from '../../../../../../components/column_wrapper';
import RowWrapper from '../../../../../../components/row_wrapper';
import { HorizontalLine } from '../../../../../../components/line_separator';
import { InputField } from '../../../../../../components/input_field';
import { PrimaryButton } from '../../../../../../components/buttons';
import { useEffect, useState } from 'react';
import Select from 'react-select';
import axios from 'axios';
import { useParams } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

function CreateContact (props){

    const {user_id} = useParams()

    const userID = {user_id: user_id}

    const [contactData, setContactData] = useState([]);
    const [currentSection, setCurrentSection] = useState('');

    const [mobileSection, setMobileSection] = useState(false);
    const [homeSection, setHomeSection] = useState(false);
    const [emergencySection, setEmergencySection] = useState(false);
    const [pagerSection, setPagerSection] = useState(false);
    const [otherSection, setOtherSection] = useState(false);

    // const handleContactChange = (event) =>{
    //     const{ name, value } = event.target;
    //     setContactData((prevData) => ({
    //         ...prevData,
    //         [name]:value,
    //     }))
    // }

    // const handleContactChange = (event) => {
    //     const { name, value } = event.target;
    //     setContactData((prevData) => {
    //         const updatedData = [...prevData];
    //         const sectionIndex = updatedData.findIndex(data => data.section === currentSection);
    //         if (sectionIndex !== -1) {
    //             updatedData[sectionIndex][name] = value;
    //         } else {
    //             updatedData.push({ section: currentSection, [name]: value });
    //         }
    //         return updatedData;
    //     });
    // };

    const handleMobileChange = (event) => {
        const { name, value } = event.target;
        setContactData((prevData) => {
            const updatedData = [...prevData];
            const nameIndex = updatedData.findIndex(data => data.name === 'Mobile');
            if (nameIndex !== -1) {
                updatedData[nameIndex][name] = value;
            } else {
                updatedData.push({ user_id: user_id, name: 'Mobile', [name]: value });
            }
            return updatedData;
        });
    };

    const handleHomeChange = (event) => {
        const { name, value } = event.target;
        setContactData((prevData) => {
            const updatedData = [...prevData];
            const nameIndex = updatedData.findIndex(data => data.name === 'Home');
            if (nameIndex !== -1) {
                updatedData[nameIndex][name] = value;
            } else {
                updatedData.push({ user_id: user_id, name: 'Home', [name]: value });
            }
            return updatedData;
        });
    };

    const handleEmergencyChange = (event) => {
        const { name, value } = event.target;
        setContactData((prevData) => {
            const updatedData = [...prevData];
            const nameIndex = updatedData.findIndex(data => data.name === 'Emergency');
            if (nameIndex !== -1) {
                updatedData[nameIndex][name] = value;
            } else {
                updatedData.push({ user_id: user_id, name: 'Emergency', [name]: value });
            }
            return updatedData;
        });
    };

    const handlePagerChange = (event) => {
        const { name, value } = event.target;
        setContactData((prevData) => {
            const updatedData = [...prevData];
            const nameIndex = updatedData.findIndex(data => data.name === 'Pager');
            if (nameIndex !== -1) {
                updatedData[nameIndex][name] = value;
            } else {
                updatedData.push({ user_id: user_id, name: 'Pager', [name]: value });
            }
            return updatedData;
        });
    };

    const handleOtherChange = (event) => {
        const { name, value } = event.target;
        setContactData((prevData) => {
            const updatedData = [...prevData];
            const nameIndex = updatedData.findIndex(data => data.name === 'Other');
            if (nameIndex !== -1) {
                updatedData[nameIndex][name] = value;
            } else {
                updatedData.push({ user_id: user_id, name: 'Other', [name]: value });
            }
            return updatedData;
        });
    };

    // const handleSectionChange = (section)
    const handleSubmit = async (event) => {
        event.preventDefault();
        try {
            // const combinedData = {
            //     ...contactData,
            //     ...userID
            // };
            const response = await axios.post('http://localhost:3060/api/contact/create', contactData)

            if (response.status === 201) {
                alert(`Contacts created succesfully with id ${response.data.contact_id}`);
                console.log('Contacts created succesfully',response);
            } else {
                alert('Error Adding Contacts');
                console.log('Error Adding Contacts');
            }
            console.log(combinedData);

        } catch (error) {
            console.error('Error: ', error);
            if (error.response) {
                console.error('Error details:', error.response.data);
              }
              if (error.response && error.response.status === 500) {
                alert("An internal server error occurred. Please try again later.");
              } else {
                alert("An error occurred while submitting the form. Please check your input and try again.");
              }
        }
    }

    const handleSubmit2 = (event) => {
        event.preventDefault();

        console.log('Contact Data');
        console.log(contactData);
    }

    return (
        <>
            <Label text="Enter principal's contact information"/>
            <HorizontalLine style={{background: 'rgb(0, 57, 110)',height:'2px' }} />
            
            <form onSubmit={handleSubmit}>

                <ColumnWrapper style={{borderRadius: '10px', borderWidth:'2px', padding: '10px', background: 'rgba(0,120,170,0.03)'}}>
                    <RowWrapper style={{border: 'none',justifyContent:'space-between', alignItems: 'center'}}>
                        <Heading6 text="Mobile"/>
                        <FontAwesomeIcon icon={`fa-solid fa-chevron-${mobileSection?"up":"right"}`} style={{fontSize: '0.7rem', cursor: 'pointer'}} onClick={()=>setMobileSection(!mobileSection)}/>
                    </RowWrapper>
                    <ColumnWrapper style={{border: 'none', display: mobileSection ? 'flex' : 'none',}}>
                        <InputField 
                            labelName="Phone Number" 
                            placeholder="Enter Phone Number" 
                            name="phone"
                            type="text" 
                            onChange={handleMobileChange}
                            // value={contactData.phone} 
                            />

                        <InputField
                            labelName="Relationship"
                            placeholder="Enter contact user relationship detail"
                            name="relationship"
                            type="text"
                            onChange={handleMobileChange}
                            // value={contactData.relationship} 
                            />
                    </ColumnWrapper>
                </ColumnWrapper>

                <ColumnWrapper style={{borderRadius: '10px', borderWidth:'2px', padding: '10px', background: 'rgba(0,120,170,0.03)'}}>
                    <RowWrapper style={{border: 'none',justifyContent:'space-between', alignItems: 'center'}}>
                        <Heading6 text="Home"/>
                        <FontAwesomeIcon icon={`fa-solid fa-chevron-${homeSection ? "up" : "right"}`} style={{fontSize: '0.7rem', cursor: 'pointer'}} onClick={() => setHomeSection(!homeSection)}/>
                    </RowWrapper>
                    <ColumnWrapper style={{border: 'none', display: homeSection ? 'flex' : 'none'}}>

                        <InputField 
                            labelName="Phone Number" 
                            placeholder="Enter Phone Number" 
                            name="phone"
                            type="text" 
                            onChange={handleHomeChange}
                            // value={contactData.homePhone} 
                            />

                        <InputField
                            labelName="Relationship"
                            placeholder="Enter contact user relationship detail"
                            name="relationship"
                            type="text"
                            onChange={handleHomeChange}
                            // value={contactData.homeRelationship} 
                            />
                    </ColumnWrapper>
                </ColumnWrapper>

                <ColumnWrapper style={{borderRadius: '10px', borderWidth:'2px', padding: '10px', background: 'rgba(0,120,170,0.03)'}}>
                    <RowWrapper style={{border: 'none',justifyContent:'space-between', alignItems: 'center'}}>
                        <Heading6 text="Emergency"/>
                        <FontAwesomeIcon icon={`fa-solid fa-chevron-${emergencySection ? "up" : "right"}`} style={{fontSize: '0.7rem', cursor: 'pointer'}} onClick={() => setEmergencySection(!emergencySection)}/>
                    </RowWrapper>
                    <ColumnWrapper style={{border: 'none', display: emergencySection ? 'flex' : 'none'}}>
                        <InputField 
                            labelName="Phone Number" 
                            placeholder="Enter Phone Number" 
                            name="phone"
                            type="text" 
                            onChange={handleEmergencyChange}
                            // value={contactData.emergencyPhone} 
                            />

                        <InputField
                            labelName="Relationship"
                            placeholder="Enter contact user relationship detail"
                            name="relationship"
                            type="text"
                            onChange={handleEmergencyChange}
                            // value={contactData.emergencyRelationship} 
                            />
                    </ColumnWrapper>
                </ColumnWrapper>

                <ColumnWrapper style={{borderRadius: '10px', borderWidth:'2px', padding: '10px', background: 'rgba(0,120,170,0.03)'}}>
                    <RowWrapper style={{border: 'none',justifyContent:'space-between', alignItems: 'center'}}>
                        <Heading6 text="Pager"/>
                        <FontAwesomeIcon icon={`fa-solid fa-chevron-${pagerSection ? "up" : "right"}`} style={{fontSize: '0.7rem', cursor: 'pointer'}} onClick={() => setPagerSection(!pagerSection)}/>
                    </RowWrapper>
                    <ColumnWrapper style={{border: 'none', display: pagerSection ? 'flex' : 'none'}}>
                        <InputField 
                            labelName="Pager Number" 
                            placeholder="Enter Pager Number" 
                            name="phone"
                            type="text" 
                            onChange={handlePagerChange}
                            // value={contactData.pagerNumber} 
                            />
                    </ColumnWrapper>
                </ColumnWrapper>

                <ColumnWrapper style={{borderRadius: '10px', borderWidth:'2px', padding: '10px', background: 'rgba(0,120,170,0.03)'}}>
                    <RowWrapper style={{border: 'none',justifyContent:'space-between', alignItems: 'center'}}>
                        <Heading6 text="Other"/>
                        <FontAwesomeIcon icon={`fa-solid fa-chevron-${otherSection ? "up" : "right"}`} style={{fontSize: '0.7rem', cursor: 'pointer'}} onClick={() => setOtherSection(!otherSection)}/>
                    </RowWrapper>
                    <ColumnWrapper style={{border: 'none', display: otherSection ? 'flex' : 'none'}}>
                        <InputField 
                            labelName="Contact Detail" 
                            placeholder="Enter Contact Detail" 
                            name="phone"
                            type="text" 
                            onChange={handleOtherChange}
                            // value={contactData.otherContact} 
                            />
                    </ColumnWrapper>
                </ColumnWrapper>



                <RowWrapper style={{ justifyContent: 'center', border: 'none'}}>
                    <PrimaryButton style={{width:'100px', fontWeight: 'normal'}}>Create</PrimaryButton>
                </RowWrapper>

            </form>
        </>
    );
}

export default CreateContact;
import { Label } from '../../../../../../components/Typography';
import ColumnWrapper from '../../../../../../components/column_wrapper';
import RowWrapper from '../../../../../../components/row_wrapper';
import { HorizontalLine } from '../../../../../../components/line_separator';
import { InputField } from '../../../../../../components/input_field';
import { PrimaryButton } from '../../../../../../components/buttons';
import { useEffect, useState } from 'react';
import Select from 'react-select';
import axios from 'axios';
import { Outlet, useLocation, useNavigate } from 'react-router-dom';

function CreatePrincipalUser (props){

    const navigate = useNavigate();

    const [userData, setUserData] = useState({});
    const [addressData, setAddressData] = useState([]);
    const [address_id, setAddressId] = useState('')
    const [role_id, setRoleId] = useState('')
    const [gender, setGender] = useState({gender: ''})
    const location = useLocation();

    const onPage = location.pathname;

    const onSpecificPage = onPage.startsWith('/admin/users/overview/principal/create/user/specific')
    // console.log(onPage);

    const getAddress = async () => {
        try{
            const response = await fetch('http://localhost:3060/api/address/load')
            const data = await response.json();
            setAddressData(data);
        }catch(error){
            console.error('Error fetching address: ', error);
        }
    };

    const getRole = async () => {
        try{
            const response = await fetch(`http://localhost:3060/api/role/loadn/Principal`);
            const data = await response.json();
            setRoleId(data.role_id)
        }catch(error){
            console.error('Error fetching roles:', error);
        }
    };

    useEffect(() => {
        getAddress();
        getRole();
    },[]);

    const handleUserChange = (event) =>{
        const{ name, value } = event.target;
        setUserData((prevData) => ({
            ...prevData,
            [name]:value,
        }))
    }

    const handleGenderChange = (event) => {
        const { value } = event.target;
        setGender({ gender: value });
    };

    const handleAddressChange = (event) => {
        const { value } = event.target;
        setAddressId(value);
    }
    const handleSubmit = async (event) => {
        event.preventDefault();
        try {
            const combinedData = {
                ...userData,
                address_id,
                role_id,
                ...gender
            };
            const response = await axios.post('http://localhost:3060/api/user/create', combinedData)

            if (response.status === 201) {
                alert(`User created succesfully!`);
                navigate('/admin/users/overview/principal/create/user/specific/' + response.data.user_id);
                console.log('User created succesfully',response);
            } else {
                alert('Error Adding User');
                console.log('Error Adding User');
            }
            console.log(combinedData);

        } catch (error) {
            console.error('Error: ', error);
            if (error.response) {
                console.error('Error details:', error.response.data);
              }
              if (error.response && error.response.status === 500) {
                alert("An internal server error occurred. Please try again later.");
              } else {
                alert("An error occurred while submitting the form. Please check your input and try again.");
              }
        }
    }

    return (
        <RowWrapper style={{
            width: '100%', 
            border: 'none', 
            justifyContent: 'space-between',
            gap: '20px',
            }}>
            <ColumnWrapper style={{width: '50%', padding: '20px', borderRadius: '20px', borderWidth: '2px', background: 'white', boxShadow: '3px 3px 5px 0px #0088ff23'}}>
                <Label text="Enter principal's user's information"/>
                
                <HorizontalLine style={{background: 'rgb(0, 57, 110)',height:'2px' }} />
                
                <form onSubmit={handleSubmit}>

                    <InputField 
                        labelName="First Name" 
                        placeholder="Enter First Name" 
                        name="first_name" 
                        type="text" 
                        value={userData.first_name} 
                        onChange={handleUserChange} />

                    <InputField 
                        labelName="Middle Name" 
                        placeholder="Enter Middle Name" 
                        name="middle_name" 
                        type="text" 
                        value={userData.middle_name} 
                        onChange={handleUserChange} />

                    <InputField 
                        labelName="Last Name" 
                        placeholder="Enter Last Name" 
                        name="last_name" 
                        type="text" 
                        value={userData.last_name} 
                        onChange={handleUserChange} />

                    <InputField 
                        labelName="Username" 
                        required 
                        placeholder="Enter Username" 
                        name="username" 
                        type="text" 
                        value={userData.username} 
                        onChange={handleUserChange} />

                    <InputField 
                        labelName="Password" 
                        required 
                        placeholder="Enter Password" 
                        name="password" 
                        type="password" 
                        value={userData.password} 
                        onChange={handleUserChange} />

                    <InputField 
                        labelName="Date of Birth" 
                        placeholder="Select Date of Birth" 
                        name="date_of_birth" 
                        type="date" 
                        value={userData.date_of_birth} 
                        onChange={handleUserChange} />

                    <ColumnWrapper style={{border:'none'}}>
                        <Label text="Gender" required />
                        <Select placeholder="Select User's Gender"
                        options={[
                            {value: 'Male', label: 'Male'},
                            {value: 'Female', label: 'Female'},
                        ]} 
                        onChange={(e) => {setGender({ gender: e.value })}}
                        />
                    </ColumnWrapper>
                    
                    <InputField 
                        labelName="Email Address" 
                        placeholder="Enter Email Address" 
                        name="email" 
                        type="email" 
                        value={userData.email} 
                        onChange={handleUserChange} />

                    <InputField 
                        labelName="House Number" 
                        placeholder="Enter House Number" 
                        name="house_number" 
                        type="text" 
                        value={userData.house_number} 
                        onChange={handleUserChange} />

                    <InputField 
                        labelName="Nationality" 
                        placeholder="Enter Nationality" 
                        name="nationality" 
                        type="text" 
                        value={userData.nationality} 
                        onChange={handleUserChange} />

                    <InputField 
                        labelName="Profile Photo URL" 
                        placeholder="Enter Profile Photo URL" 
                        name="profile_photo" 
                        type="text" 
                        value={userData.profile_photo} 
                        onChange={handleUserChange} />
                    
                    <ColumnWrapper style={{border:'none'}}>
                        <Label text="Address" required/>
                            <Select placeholder="Select User's Address"
                                options={addressData.map((address) => ({
                                    value: address.address_id,
                                    label: `${address.city}, ${address.subcity}, ${address.woreda}, ${address.kebele}`,
                                }))}
                                onChange={(e) => setAddressId(e.value)}></Select>
                    </ColumnWrapper>

                    <RowWrapper style={{ justifyContent: 'flex-end', border: 'none'}}>
                        <PrimaryButton style={{width:'100px', fontWeight: 'normal'}}>Next</PrimaryButton>
                    </RowWrapper>
                </form>
            </ColumnWrapper>
            {onSpecificPage&&
            <ColumnWrapper style={{width: '50%', padding: '20px', borderRadius: '20px', borderWidth: '2px', background: 'white', boxShadow: '3px 3px 5px 0px #0088ff23'}}>
                <Outlet />
            </ColumnWrapper>}
        </RowWrapper>
        
    );
}

export default CreatePrincipalUser
import React, { useEffect, useState } from 'react'
import '../../../../../../styles/admin-school.css';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import '../button-styles.css'

import ColumnWrapper from '../../../../../../components/column_wrapper';
import RowWrapper from '../../../../../../components/row_wrapper';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { Heading5, Label, Paragraph } from '../../../../../../components/Typography';
import { TertiaryButton } from '../../../../../../components/buttons';

library.add(fas)

function ViewPrincipalProfile() {
    const apiURL = import.meta.env.VITE_API_URL;

    const [principalData, setPrincipalData] = useState({});
    const { state } = useLocation();
    const navigate = useNavigate();

    useEffect(() => {
        setPrincipalData(state?.principal);
    }, [state]);

    const handleDelete = async (principalId) => {
        try {
          if (window.confirm('Are you sure you want to delete this principal\'s data?')) {
              const response = await fetch(`${apiURL}/api/principal/delete/${principalId}`, {
                  method: 'DELETE',
                  headers: {
                      'Content-Type': 'application/json'
                  }
              });
              const data = await response.json();
              console.log(data);
              alert('Deleted')
              navigate('/admin/users/overview/principal/list')
          } else {
              console.log('Deletion canceled');
          }

        } catch (error) {
            console.error('Error deleting principal: ', error);
        }
    }

    return (
      <ColumnWrapper style={{ justifyContent: 'center', alignItems: 'center', gap: '20px', border: 'none' }}>
        <ColumnWrapper style={{
            width: '70%',
            background: 'rgba(235,235,235,0.15)',
            boxShadow: '3px 3px 10px 4px #0000001a',
            padding: '20px',
            borderRadius: '40px',
            border: 'none',
            margin: '30px'
        }}>
            <RowWrapper style={{ justifyContent: 'end', border: 'none' }}>
                <FontAwesomeIcon onClick={() => {history.back()}} icon='fa-solid fa-xmark' color='rgba(0,130,239,0.6)' style={{ cursor: 'pointer' }} />
            </RowWrapper>
            <ColumnWrapper style={{ justifyContent: 'center', alignItems: 'center', gap: '20px', border: 'none' }}>
                <img
                    src={principalData?.user?.profile_photo ? principalData?.user?.profile_photo :
                        "https://www.pngall.com/wp-content/uploads/5/User-Profile-PNG-High-Quality-Image.png"}
                    alt="principal_profile_image"
                    style={{ width: '160px', height: '160px', borderRadius: '50%', objectFit: 'cover' }}
                />
                <Label style={{ fontWeight: 'bold' }} text={`${principalData?.user?.first_name} ${principalData?.user?.middle_name} ${principalData?.user?.last_name}`} />
                <Paragraph text={principalData?.bio} />
            </ColumnWrapper>
            <ColumnWrapper>
            
                <ColumnWrapper style={{ gap: '20px'  }}>
                    <Heading5 text="1. Personal Information" />
                    <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                        <RowWrapper style={{justifyContent:'space-between', gap: '10px', border: 'none'}}>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Full Name" style={{ fontWeight: 'bold' }} />
                                <Label text={`${principalData?.user?.first_name} ${principalData?.user?.middle_name} ${principalData?.user?.last_name}`} />
                            </ColumnWrapper>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Gender" style={{ fontWeight: 'bold' }} />
                                <Label text={principalData?.user?.gender} />
                            </ColumnWrapper>
                        </RowWrapper>
                        <RowWrapper style={{justifyContent:'space-between', gap: '10px', border: 'none' }}>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Date of Birth" style={{ fontWeight: 'bold' }} />
                                <Label text={new Date(principalData?.user?.date_of_birth).toLocaleDateString()} />
                            </ColumnWrapper>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Nationality" style={{ fontWeight: 'bold' }} />
                                <Label text={principalData?.user?.nationality} />
                            </ColumnWrapper>
                        </RowWrapper>
                        <RowWrapper style={{justifyContent:'space-between', gap: '10px', border: 'none' }}>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Email" style={{ fontWeight: 'bold' }} />
                                <Label text={principalData?.user?.email} />
                            </ColumnWrapper>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Mobile Number" style={{ fontWeight: 'bold' }} />
                                {principalData?.contact?.map((contact, index) => (<Label key={index} text={contact.name + ": "+contact.phone}/>))}
                            </ColumnWrapper>
                        </RowWrapper>
                        <RowWrapper style={{justifyContent:'space-between', gap: '10px', border: 'none' }}>
                            {/* <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Emergency Contact" style={{ fontWeight: 'bold' }} />
                                <Label text={principalData?.contact[0]?.phone} />
                            </ColumnWrapper> */}
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Address" style={{ fontWeight: 'bold' }} />
                                <Label text={`House No. ${principalData?.user?.house_number}, ${principalData?.user?.office_location}`} />
                            </ColumnWrapper>
                        </RowWrapper>
                    </ColumnWrapper>

                    <Heading5 text="2. Professional Information" />
                    <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                        <RowWrapper style={{justifyContent:'space-between', gap: '10px', border: 'none' }}>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Education Level" style={{ fontWeight: 'bold' }} />
                                <Label text={principalData?.education_level} />
                            </ColumnWrapper>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Qualification" style={{ fontWeight: 'bold' }} />
                                <Label text={principalData?.qualification} />
                            </ColumnWrapper>
                        </RowWrapper>
                        <RowWrapper style={{justifyContent:'space-between', gap: '10px', border: 'none' }}>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Experience" style={{ fontWeight: 'bold' }} />
                                <Label text={`${principalData?.experience_years} years`} />
                            </ColumnWrapper>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Specialization" style={{ fontWeight: 'bold' }} />
                                <Label text={principalData?.specialization} />
                            </ColumnWrapper>
                        </RowWrapper>
                        <RowWrapper style={{justifyContent:'space-between', gap: '10px', border: 'none' }}>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Status" style={{ fontWeight: 'bold' }} />
                                <Label text={principalData?.status} />
                            </ColumnWrapper>
                            <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                                <Label text="Start Date" style={{ fontWeight: 'bold' }} />
                                <Label text={new Date(principalData?.start_date).toLocaleDateString()} />
                            </ColumnWrapper>
                        </RowWrapper>
                    </ColumnWrapper>

                    <Heading5 text="3. School Information (Assigned School)" />
                    <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                        <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                            <Label text="School Name" style={{ fontWeight: 'bold' }} />
                            <Label text={principalData?.school?.name} />
                        </ColumnWrapper>
                        <ColumnWrapper style={{ gap: '10px', border: 'none' }}>
                            <Label text="School Code" style={{ fontWeight: 'bold' }} />
                            <Label text={principalData?.school?.school_code} />
                        </ColumnWrapper>
                    </ColumnWrapper>
                </ColumnWrapper>

            </ColumnWrapper>

            <TertiaryButton onClick={() => handleDelete(principalData.principal_id)} style={{ color: 'red', fontSize: '0.7rem' }}>Delete</TertiaryButton>
        </ColumnWrapper>
      </ColumnWrapper>
    )
}

export default ViewPrincipalProfile;
import React, { useEffect, useState } from 'react'
import '../../../../../../styles/admin-school.css';
import { useNavigate } from 'react-router-dom';
import '../button-styles.css'

import PrincipalListing from '../../../../../../components/principal-components/principal_listings';
import ColumnWrapper from '../../../../../../components/column_wrapper';
import RowWrapper from '../../../../../../components/row_wrapper';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { Heading6, Label, Paragraph } from '../../../../../../components/Typography';
import { TertiaryButton } from '../../../../../../components/buttons';
import { Outlet } from 'react-router-dom';
import loading from '../../../../../../../public/loading.gif'
import { CenterColumn } from '../../../../../../components/center';

library.add(fas);

function PrincipalList() {

  const apiURL = import.meta.env.VITE_API_URL;

  const [principals, setPrincipals] = useState([])
  const [user, setUser] = useState([])
  const [school, setSchool] = useState([])

  const [principalData, setPrincipalData] = useState([])

  const getPrincipals = async () => {
    try {
      const response = await fetch(`${apiURL}/api/principal/load`);
      const data = await response.json();
      setPrincipals(data);
    } catch (error) {
      console.error('Error fetching principals:', error);
    }
  };

  const getPrincipalData = async (principalsArray) => {
    const dataWithRelations = await Promise.all(
        principalsArray.map(async (principal) => {
            const userResponse = await fetch(`${apiURL}/api/user/load/${principal.user_id}`);
            const userData = await userResponse.json();

            const schoolResponse = await fetch(`${apiURL}/api/school/load/${principal.school_id}`);
            const schoolData = await schoolResponse.json();

            // const contactResponse = await fetch(`${apiURL}/api/contact/load/${principal.contact_id}`);
            // const contactData = await contactResponse.json();
            const contactResponse = await fetch(`${apiURL}/api/contact/loadu/${principal.user_id}`);
            const contactData = await contactResponse.json();


            return { ...principal, user: userData, school: schoolData, contact: contactData };
        })
    );
    setPrincipalData(dataWithRelations);
  };

  console.log(principalData);
  

  useEffect(() => {
    getPrincipals()
  }, []);

  useEffect(() => {
    // getSchools(principals);
    // getUsers(principals);
    if (principals.length > 0) {
        getPrincipalData(principals);
    }
  },[principals]);
 
const navigate = useNavigate();

  const handleEdit = (principalID) => {
    console.log('Editing principal with ID:', principalID);
    // navigate(`/admin/principal/edit/${principalID}`)
  };

  const handleView = (principalID) => {
    alert('ViewSchool')
    // navigate(`/admin/principal/view/${principalID}`)
  }
  return (
    <>
    <RowWrapper style={{justifyContent: 'space-between', gap: '20px', border: 'none',}}>
      {
        principalData.length === 0?
        <CenterColumn>
          <img src={loading} alt="" style={{width: '100px'}} />
        </CenterColumn>
        :
        <PrincipalListing
          title='Principals'
          principals={principalData}
          handleEdit={handleEdit}
          // handleView={handleView}
          width='100%'
        />
        }

        <Outlet />

    </RowWrapper>
    </>
  )

}

export default PrincipalList;import React, { useEffect, useState } from 'react'
import '../../../../../../styles/admin-school.css';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import '../button-styles.css'

import PrincipalListing from '../../../../../../components/principal-components/principal_listings';
import ColumnWrapper from '../../../../../../components/column_wrapper';
import RowWrapper from '../../../../../../components/row_wrapper';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { Heading6, Label, Paragraph } from '../../../../../../components/Typography';
import { TertiaryButton } from '../../../../../../components/buttons';

library.add(fas)
function ViewPrincipal() {

    const apiURL = import.meta.env.VITE_API_URL;
    const [principal, setPrincipal] = useState({});
    const [principalData, setPrincipalData] = useState({});
    const { principalId } = useParams();
    const { state } = useLocation();

    // const getPrincipal = async (principalId) => {
    //     try{
    //     const response = await fetch(`${apiURL}/api/principal/load/${principalId}`);
    //     const data = await response.json();
    //     setPrincipal(data)
    //     } catch (error) {
    //         console.error('Error fetching principal: ', error)
    //     }
    // };

    // const getPrincipalData = async (principalObj) =>{
    //     const dataWithRelation = await Promise.all([
    //         fetch(`${apiURL}/api/user/load/${principalObj.user_id}`).then(response => response.json()),
    //         fetch(`${apiURL}/api/school/load/${principalObj.school_id}`).then(response => response.json()),
    //         fetch(`${apiURL}/api/contact/loadu/${principalObj.user_id}`).then(response => response.json()),
    //     ]);

    //     const [user, school, contact] = dataWithRelation;

    //     const principalData = { ...principalObj, user: user, school: school, contact: contact };
    
    //     setPrincipalData(principalData);
    // }        

    // useEffect(() => {
    //     if (principalId) {
    //         getPrincipal(principalId);
    //     }
    // }, [principalId]);

    // useEffect(() => {
    //     if (principal) {
    //         getPrincipalData(principal);
    //     }
    // }, [principal]);

    // console.log(principal);
    // console.log("principal Data", principalData);

    useEffect(() => {
        setPrincipalData(state?.principal);
    },[state])

    const navigate = useNavigate();

    const handleViewProfile = (principal) => {
        navigate(`/admin/users/overview/principal/view_profile`, {state: {principal}})
    }
    return (
        <ColumnWrapper style={{
            width: '30%',
            background: 'rgba(235,235,235,0.15)',
            boxShadow: '3px 3px 10px 4px #0000001a',
            padding: '20px',
            borderRadius: '40px',
            border: 'none',
            margin: '30px'
            }}>
                <RowWrapper style={{justifyContent: 'end', border: 'none', }}>
                <FontAwesomeIcon icon='fa-solid fa-xmark' color='rgba(0,130,239,0.6)' style={{cursor: 'pointer'}}/>
                </RowWrapper>
                <ColumnWrapper style={{justifyContent: 'center', alignItems: 'center', gap: '20px', border: 'none',}}>
                <img 
                // src="https://img.freepik.com/free-photo/confident-good-looking-beautiful-woman-with-blonde-dyed-hair-dressed-casual-clothes-looking-seriously_176420-15186.jpg" 
                src={principalData?.user?.profile_photo ? principalData?.user?.profile_photo : 
                    "https://www.pngall.com/wp-content/uploads/5/User-Profile-PNG-High-Quality-Image.png"} 
                    
                
                alt="principal_profile_image" 
                    style={{width: '160px', height: '160px', borderRadius: '50%', objectFit: 'cover'}}
                />
                <Label style={{fontWeight: 'bold'}} text={principalData?.user?.first_name+" "+principalData?.user?.middle_name+" "+principalData?.user?.last_name} />
                </ColumnWrapper>
                <ColumnWrapper style={{gap: '10px', border: 'none',}}>

                <RowWrapper style={{gap: '10px', border: 'none',}}>
                    <ColumnWrapper style={{gap: '10px', border: 'none',}}>
                        <Label text='Gender' style={{fontWeight: 'bold'}}/>
                        <Label text={principalData?.user?.gender} />
                    </ColumnWrapper>
                </RowWrapper>

                <RowWrapper style={{justifyContent:'space-between', alignItems: 'center', border: 'none'}}>
                    <ColumnWrapper style={{gap: '10px', border: 'none',}}>
                        <Label text='Email' style={{fontWeight: 'bold'}}/>
                        <Label text={principalData?.user?.email} />
                    </ColumnWrapper>
                    <FontAwesomeIcon icon='fa-solid fa-envelope' color='rgba(0,130,239,0.6)' style={{cursor: 'pointer'}}/>
                </RowWrapper>

                <RowWrapper style={{justifyContent:'space-between', alignItems: 'center', border: 'none'}}>
                    <ColumnWrapper style={{gap: '10px', border: 'none',}}>
                        <Label text='Phone Number' style={{fontWeight: 'bold'}}/>
                        <Label text={
                            principalData?.contact?.phone
                        } />
                    </ColumnWrapper>
                    <FontAwesomeIcon icon='fa-solid fa-phone' color='rgba(0,130,239,0.6)' style={{cursor: 'pointer'}}/>
                </RowWrapper>
                </ColumnWrapper>

                <TertiaryButton style={{fontSize: '0.7rem'}} onClick={()=> handleViewProfile(principalData)} >View Profile</TertiaryButton>
            </ColumnWrapper>
    )
}

export default ViewPrincipalimport React from 'react'

function Student() {
  return (
    <div>Student</div>
  )
}

export default Studentimport React from 'react'

function Supervisor() {
  return (
    <div>Supervisor</div>
  )
}

export default Supervisorimport React from 'react'

function Profile() {
  return (
    <div>Profile</div>
  )
}

export default Profileimport React, { useEffect, useState } from 'react';
import { Heading2, Heading4, Label } from '../../../../components/Typography';
import { InputField } from '../../../../components/input_field';
import { PrimaryButton, TertiaryButton } from '../../../../components/buttons';
import { CenterColumn } from '../../../../components/center';
import ColumnWrapper from '../../../../components/column_wrapper';
import RowWrapper from '../../../../components/row_wrapper';
import Select from 'react-select';
import axios from 'axios';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

function AddSchool() {
  const apiURL = import.meta.env.VITE_API_URL;

  const [address, setAddress] = useState([]);
  const [schoolData, setSchoolData] = useState({
    name: '',
    established_year: '',
    // type: '',
    website: '',
    affiliation: '',
    // school_level: '',
    is_deleted: false,
    school_code: '',
    medium_of_instruction: '',
    total_students: 0,
    total_teachers: 0,
    accreditation_status: '',
    campus_area: '',
    facilities_number_of_classrooms: 0,
    number_of_labs: 0,
    annual_budget: 0,
    school_motto: '',
    school_logo: '',
    school_type: '',
    language_offerings: '',
    transport_facility: false,
    hostel_facility: false,
    health_services: false,
    school_manager: '',
    accreditation_number: '',
    sponsorship_details: '',
    annual_tuition_fee: 0,
    student_gender_ratio: '',
    teacher_student_ratio: '',
    special_programs: '',
    accessibility_features: '',
  });
  const [type, setSchoolType] = useState('');
  const [school_level, setSchoolLevel] = useState('');
  const [address_id, setAddressId] = useState('');
  const [contactData, setContactData] = useState({
    email: '',
  });

  // States for visibility of fields
  const [showAddressField, setShowAddressField] = useState('show');
  const [showBasicField, setShowBasicField] = useState('show');
  const [showAdditionalField, setShowAdditionalField] = useState('show');
  const [showFacilitiesField, setShowFacilitiesField] = useState('show');
  const [showContactField, setShowContactField] = useState('show');

  const getAddress = async () => {
    try {
      const response = await fetch(`${apiURL}/api/address/load`); 
      const data = await response.json();
      setAddress(data);
    } catch (error) {
      console.error("Error fetching addresses:", error);
    }
  };

  useEffect(() => {
    getAddress();
  }, []);

  const handleSchoolChange = (event) => {
    const { name, value } = event.target;
    setSchoolData((prevData) => ({
      ...prevData,
      [name]: (name === 'annual_tuition_fee' || name === 'annual_budget' || 
        name === 'total_students' || name === 'total_teachers' || 
        name === 'facilities_number_of_classrooms' || name === 'number_of_labs' ) ? 
        // Convert to number if necessary
        // The value is first parsed as an integer, and if it fails to parse, it falls back to 0. 
        // This is because parseInt() returns NaN if the string cannot be parsed as an integer.
        parseInt(value, 10) || 0 : 
        // If the value is not one of the specified fields, just assign the value as is
        value, 
    }));
  };

  const handleAddressChange = (event) => {
    setAddressId(event.target.value); // Assuming this is a dropdown
  };

  const handleContactChange = (event) => {
    const { name, value } = event.target;
    setContactData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (event) => {
    event.preventDefault(); 

    try {
      const combinedData = {
        ...schoolData,
        address_id,
        type,
        school_level,
        ...contactData
      };

      const response = await axios.post(`${apiURL}/api/school/create`, combinedData);

      if (response.status === 201) {
        alert("School added successfully!");
        // Reset the form or redirect to a success page
      } else {
        alert("Error adding school. Please try again.");
      }
    } catch (error) {
      console.error('Error submitting form:', error);
      if (error.response) {
        console.error('Error details:', error.response.data);
        alert(error.response.data.message); // Assuming the response contains a 'message' property
      }
      if (error.response && error.response.status === 500) {
        alert("An internal server error occurred. Please try again later.");
      } else {
        alert("An error occurred while submitting the form. Please check your input and try again.");
      }
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <CenterColumn>
          <ColumnWrapper style={{
              padding: '30px',
              borderRadius: '10px',
              width: '700px',
              background: '#87CEFA54',
              border: 'none',
              gap: '20px'
            }}>

            <Heading2 text="Add New School" />

            {/* Basic Information Field */}
            <ColumnWrapper style={{
                background: 'white',
                borderRadius: '10px',
                border: 'none',
                }}>

                <RowWrapper
                style={{
                    border: 'none',
                    alignItems:'center',
                    gap: '30px',
                    justifyContent: 'space-between'
                }}>
                <Heading4 text="Basic Information" />
                <FontAwesomeIcon 
                    color='gray'
                    icon={showBasicField === 'show' ? 'fa-solid fa-chevron-up' : 'fa-solid fa-chevron-down'}
                    style={{
                        cursor:'pointer'
                    }}
                    onClick={() => setShowBasicField(prevState => (prevState === 'show' ? 'hide' : 'show'))}
                    />
                </RowWrapper>

                <RowWrapper style={{ 
                    justifyContent: 'space-evenly',
                    display: (showBasicField === 'show')?'flex':'none',
                    border: 'none',
                    }}>
                <ColumnWrapper style={{ 
                    width: '300px',
                    border: 'none',
                    }}>
                    <InputField
                    required
                    labelName="Name"
                    placeholder="Enter School Name"
                    name="name"
                    type="text"
                    value={schoolData.name}
                    onChange={handleSchoolChange}
                    />
                    <InputField
                    labelName="Website"
                    placeholder="Enter Website"
                    name="website"
                    type="text"
                    value={schoolData.website}
                    onChange={handleSchoolChange}
                    />
                    <InputField
                    labelName="Established Year"
                    required
                    placeholder="Enter Established Year"
                    name="established_year"
                    type="number"
                    value={schoolData.established_year}
                    onChange={handleSchoolChange}
                    />
                    {/* <InputField
                    labelName="Type"
                    required
                    placeholder="Enter School Type"
                    name="type"
                    type="text"
                    value={schoolData.type}
                    onChange={handleSchoolChange}
                    /> */}

                    <ColumnWrapper style={{border:'none'}}>
                      <Label text='School Type' required/>
                      <Select
                      placeholder="Select School Type"
                      options={schoolTypeOptions}

                      onChange={(option) => setSchoolType(option.value)}

                      ></Select>
                    </ColumnWrapper>

                    <InputField
                    labelName="School Code"
                    required
                    placeholder="Enter School Code"
                    name="school_code"
                    type="text"
                    value={schoolData.school_code}
                    onChange={handleSchoolChange}
                    />
                </ColumnWrapper>
                <ColumnWrapper style={{ 
                    width: '300px',
                    border: 'none'
                    }}>
                    <InputField
                    labelName="Affiliation"
                    placeholder="Enter Affiliation"
                    name="affiliation"
                    type="text"
                    value={schoolData.affiliation}
                    onChange={handleSchoolChange}
                    />
                    <InputField
                    labelName="Medium of Instruction"
                    placeholder="Enter Medium of Instruction"
                    name="medium_of_instruction"
                    type="text"
                    value={schoolData.medium_of_instruction}
                    onChange={handleSchoolChange}
                    />
                    {/* <InputField
                    labelName="School Level"
                    required
                    placeholder="Enter School Level"
                    name="school_level"
                    type="text"
                    value={schoolData.school_level}
                    onChange={handleSchoolChange}
                    /> */}

                    <ColumnWrapper style={{border: 'none'}}>
                      <Label text="School Level" required/>

                      <Select
                        placeholder="Select School Level"
                        options={schoolLevelOptions}
                        onChange={(option) => setSchoolLevel(option.value)}
                      ></Select>
                    </ColumnWrapper>
                    <InputField
                    labelName="Total Students"
                    placeholder="Enter Total Students"
                    name="total_students"
                    type="number"
                    value={schoolData.total_students}
                    onChange={handleSchoolChange}
                    />
                    <InputField
                    labelName="Total Teachers"
                    placeholder="Enter Total Teachers"
                    name="total_teachers"
                    type="number"
                    value={schoolData.total_teachers}
                    onChange={handleSchoolChange}
                    />
                </ColumnWrapper>
                </RowWrapper>
            </ColumnWrapper>

            {/* Address Field */}
            <ColumnWrapper style={{
                background: 'white',
                borderRadius: '10px',
                border: 'none',
                }}>
                <RowWrapper
                style={{
                    border: 'none',
                    alignItems:'center',
                    gap: '30px',
                    justifyContent: 'space-between'
                }}>
                <Heading4 text="Address Information" />
                <FontAwesomeIcon 
                    color='gray'
                    icon={showAddressField === 'show' ? 'fa-solid fa-chevron-up' : 'fa-solid fa-chevron-down'}
                    style={{
                        cursor:'pointer'
                    }}
                    onClick={() => setShowAddressField(prevState => (prevState === 'show' ? 'hide' : 'show'))}
                    />
                </RowWrapper>
                <RowWrapper style={{
                    display: (showAddressField === 'show')?'flex':'none',
                    border: 'none'
                }}>
                    <ColumnWrapper style={{border: 'none'}}>
                        <Label text='School Address' required />
                        <Select
                        placeholder='Select the School Address'
                        options={address.map((addr) => ({
                            value: addr.address_id,
                            label: addr.city+","+addr.subcity+","+addr.woreda+","+addr.kebele
                        }))}
                        onChange={(option) => setAddressId(option.value)}
                        ></Select>
                    </ColumnWrapper>
                </RowWrapper>

            </ColumnWrapper>

            {/* Additional Field */}
            <ColumnWrapper style={{
                background: 'white',
                borderRadius: '10px',
                border: 'none',
                }}>
                <RowWrapper
                style={{
                    border: 'none',
                    alignItems:'center',
                    gap: '30px',
                    justifyContent: 'space-between'
                }}>
                <Heading4 text="Additional Information" />
                <FontAwesomeIcon 
                    color='gray'
                    icon={showAdditionalField === 'show' ? 'fa-solid fa-chevron-up' : 'fa-solid fa-chevron-down'}
                    style={{
                        cursor:'pointer'
                    }}
                    onClick={() => setShowAdditionalField(prevState => (prevState === 'show' ? 'hide' : 'show'))}
                    />
                </RowWrapper>
                <RowWrapper style={{ 
                    justifyContent: 'space-evenly', 
                    display: (showAdditionalField === 'show')?'flex':'none',
                    border: 'none'
                    }}>
                    <ColumnWrapper style={{ 
                        width: '300px',
                        border: 'none'
                        }}>
                        <InputField
                        labelName="Accreditation Status"
                        placeholder="Enter Accreditation Status"
                        name="accreditation_status"
                        type="text"
                        value={schoolData.accreditation_status}
                        onChange={handleSchoolChange}
                        />

                        <InputField
                        labelName="Campus Area"
                        placeholder="Enter Campus Area"
                        name="campus_area"
                        type="text"
                        value={schoolData.campus_area}
                        onChange={handleSchoolChange}
                        />
                        <InputField
                        labelName="Number of Classrooms"
                        placeholder="Enter Number of Classrooms"
                        name="facilities_number_of_classrooms"
                        type="number"
                        value={schoolData.facilities_number_of_classrooms}
                        onChange={handleSchoolChange}
                        />
                        <InputField
                        labelName="Number of Labs"
                        placeholder="Enter Number of Labs"
                        name="number_of_labs"
                        type="number"
                        value={schoolData.number_of_labs}
                        onChange={handleSchoolChange}
                        />
                        <InputField
                        labelName="Annual Budget"
                        placeholder="Enter Annual Budget"
                        name="annual_budget"
                        type="number"
                        value={schoolData.annual_budget}
                        onChange={handleSchoolChange}
                        />
                    </ColumnWrapper>
                    <ColumnWrapper style={{ 
                        width: '300px',
                        border: 'none' 
                        }}>
                        <InputField
                        labelName="Motto"
                        placeholder="Enter Motto"
                        name="school_motto"
                        type="text"
                        value={schoolData.school_motto}
                        onChange={handleSchoolChange}
                        />
                        <InputField
                        labelName="Logo URL"
                        placeholder="Enter Logo URL"
                        name="school_logo"
                        type="text"
                        value={schoolData.school_logo}
                        onChange={handleSchoolChange}
                        />
                        <InputField
                        labelName="Language Offerings"
                        placeholder="Enter Language Offerings"
                        name="language_offerings"
                        type="text"
                        value={schoolData.language_offerings}
                        onChange={handleSchoolChange}
                        />
                        <InputField
                        labelName="Special Programs"
                        placeholder="Enter Special Programs"
                        name="special_programs"
                        type="text"
                        value={schoolData.special_programs}
                        onChange={handleSchoolChange}
                        />
                        <InputField
                        labelName="Accessibility Features"
                        placeholder="Enter Accessibility Features"
                        name="accessibility_features"
                        type="text"
                        value={schoolData.accessibility_features}
                        onChange={handleSchoolChange}
                        />
                    </ColumnWrapper>
                </RowWrapper>
            </ColumnWrapper>

            {/* Facilities Field */}
            <ColumnWrapper style={{
                background: 'white',
                borderRadius: '10px',
                border: 'none',
                }}>
                <RowWrapper
                style={{
                    border: 'none',
                    alignItems:'center',
                    gap: '30px',
                    justifyContent: 'space-between'
                }}>
                <Heading4 text="Facilities" />
                <FontAwesomeIcon 
                    color='gray'
                    icon={showFacilitiesField === 'show' ? 'fa-solid fa-chevron-up' : 'fa-solid fa-chevron-down'}
                    style={{
                        cursor:'pointer'
                    }}
                    onClick={() => setShowFacilitiesField(prevState => (prevState === 'show' ? 'hide' : 'show'))}
                    />
                </RowWrapper>
                <RowWrapper style={{ 
                    justifyContent: 'space-evenly', 
                    display: (showFacilitiesField === 'show')?'flex':'none',
                    border: 'none'
                    }}>
                <ColumnWrapper style={{ 
                    width: '300px',
                    border: 'none'
                    }}>
                    <label>
                    <input
                        type="checkbox"
                        name="transport_facility"
                        checked={schoolData.transport_facility}
                        onChange={() =>
                        setSchoolData((prevData) => ({
                            ...prevData,
                            transport_facility: !prevData.transport_facility,
                        }))
                        }
                    />
                    Transport Facility
                    </label>

                    <label>
                    <input
                        type="checkbox"
                        name="hostel_facility"
                        checked={schoolData.hostel_facility}
                        onChange={() =>
                        setSchoolData((prevData) => ({
                            ...prevData,
                            hostel_facility: !prevData.hostel_facility,
                        }))
                        }
                    />
                    Hostel Facility
                    </label>
                </ColumnWrapper>
                <ColumnWrapper style={{ 
                    width: '300px',
                    border: 'none'
                    }}>
                    <label>
                    <input
                        type="checkbox"
                        name="health_services"
                        checked={schoolData.health_services}
                        onChange={() =>
                        setSchoolData((prevData) => ({
                            ...prevData,
                            health_services: !prevData.health_services,
                        }))
                        }
                    />
                    Health Services
                    </label>
                </ColumnWrapper>
                </RowWrapper>
            </ColumnWrapper>

            {/* Contact Field */}
            <ColumnWrapper style={{
                background: 'white',
                borderRadius: '10px',
                border: 'none',
                // justifyContent: 'space-between'
                }}>
                <RowWrapper
                style={{
                    border: 'none',
                    alignItems:'center',
                    gap: '30px',
                    justifyContent: 'space-between'
                }}>
                <Heading4 text="Contact Information" />
                <FontAwesomeIcon 
                    color='gray'
                    icon={showContactField === 'show' ? 'fa-solid fa-chevron-up' : 'fa-solid fa-chevron-down'}
                    style={{
                        cursor:'pointer'
                    }}
                    onClick={() => setShowContactField(prevState => (prevState === 'show' ? 'hide' : 'show'))}
                    />
                </RowWrapper>
                <RowWrapper style={{ 
                    justifyContent: 'space-evenly', 
                    display: (showContactField === 'show')?'flex':'none',
                    border: 'none'
                    }}>
                <ColumnWrapper style={{ 
                    width: '300px',
                    border: 'none'
                    }}>
                    <InputField
                    labelName="Phone Number"
                    placeholder="Enter Phone Number"
                    name="phone_number"
                    type="text"
                    value={contactData.phone_number}
                    onChange={handleContactChange}
                    />
                    <InputField
                    labelName="Email Address"
                    placeholder="Enter Email Address"
                    name="email"
                    type="text"
                    value={contactData.email}
                    onChange={handleContactChange}
                    />
                </ColumnWrapper>
                </RowWrapper>

            </ColumnWrapper>
            <CenterColumn>
              <PrimaryButton type="submit"
                // style={{width: '100px'}}
              >Submit</PrimaryButton>
              <TertiaryButton text="Cancel" />
            </CenterColumn>
          </ColumnWrapper>
        </CenterColumn>
      </form>
    </div>
  );
}

const schoolTypeOptions = [
  { value: 'public_government_school', label: 'Public: Government School' },
  { value: 'public_community_school', label: 'Public: Community School' },
  { value: 'private_general_school', label: 'Private: General Private School' },
  { value: 'private_mission_school', label: 'Private: Mission School' },
  { value: 'international_school', label: 'International: International School' },
  { value: 'religious_islamic_school', label: 'Religious: Islamic School (Madrasa)' },
  { value: 'religious_christian_school', label: 'Religious: Christian School' },
  { value: 'alternative_adult_education_center', label: 'Alternative: Adult Education Center' },
  { value: 'alternative_nfe_center', label: 'Alternative: Non-Formal Education (NFE) Center' },
  { value: 'vocational_technical_school', label: 'Vocational and Technical: Vocational and Technical School' },
  { value: 'special_needs_school', label: 'Special Needs: Special Needs School' },
  { value: 'charity_school', label: 'Charity: Charity School' }
];

const schoolLevelOptions = [
  { value: 'primary_elementary', label: 'Primary: Elementary' },
  { value: 'junior_secondary', label: 'Secondary: Junior Secondary' },
  { value: 'senior_secondary', label: 'Secondary: Senior Secondary' },
  { value: 'vocational_tvet', label: 'Vocational: TVET Level III Diploma' },
  { value: 'tertiary_bachelor_education', label: 'Tertiary: Bachelor of Education' },
  { value: 'tertiary_bachelor_arts_science', label: 'Tertiary: Bachelor of Arts/Science' },
  { value: 'tertiary_masters', label: 'Tertiary: Master\'s Degree' },
  { value: 'tertiary_doctorate', label: 'Tertiary: Doctorate (PhD)' }
];

export default AddSchool;import React, { useEffect, useState } from 'react';
import ColumnWrapper from '../../../../components/column_wrapper';
import RowWrapper from '../../../../components/row_wrapper';
import { PrimaryButton, SecondaryButton, DangerButton } from '../../../../components/buttons';
import { Heading2, Heading3, Heading4, Label, Paragraph } from '../../../../components/Typography';
import { useParams } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { InputField } from '../../../../components/input_field';
import "../../../../styles/admin-dashboard/edit_field.css"
import axios from 'axios';

function EditSchool() {
    
    const [schoolInfo, setSchoolInfo] = useState({
        name: '',
        established_year: '',
        type: '',
        website: '',
        school_level: '',
        is_deleted: false,
        school_code: '',
        medium_of_instruction: '',
        total_students: 0,
        affiliation: '',
        total_teachers: 0,
        accreditation_status: '',
        campus_area: '',
        facilities_number_of_classrooms: 0,
        number_of_labs: 0,
        annual_budget: 0,
        school_motto: '',
        school_logo: '',
        school_type: '',
        language_offerings: '',
        transport_facility: false,
        hostel_facility: false,
        health_services: false,
        school_manager: '',
        accreditation_number: '',
        sponsorship_details: '',
        annual_tuition_fee: 0,
        student_gender_ratio: '',
        teacher_student_ratio: '',
        special_programs: '',
        accessibility_features: '',
    });
    const [address, setAddress] = useState({});
    // const [schoolMotto, setSchoolMotto] = useState('');
    const [editedInfo, setEditedInfo] = useState()

    const { schoolId } = useParams();

    const getSchoolInfo = async (schoolId) => {
        try {
            const response = await fetch(`http://localhost:3060/api/school/load/${schoolId}`);
            const data = await response.json();
            setSchoolInfo(data);
            // setSchoolMotto(data.school_motto || '');
        } catch (error) {
            console.error("Error fetching school information: ", error);
        }
    };

    useEffect(() => {
        getSchoolInfo(schoolId);
    }, [schoolId]);

    const getAddress = async (addressId) => {
        try {
            const response = await fetch(`http://localhost:3060/api/address/load/${addressId}`);
            const data = await response.json();
            setAddress(data);
        } catch (err) {
            console.error("Error fetching address: ", err);
        }
    };

    useEffect(() => {
        if (schoolInfo.address_id) {
            console.log("Fetching address with ID:", schoolInfo.address_id);
            getAddress(schoolInfo.address_id);
        } else {
            console.error("Invalid address_id:", schoolInfo.address_id);
        }
    }, [schoolInfo.address_id]);

    const backHandle = () => {
        history.back();
    };

    const handleInputChange = (e, field) => {
        setSchoolInfo({
            ...schoolInfo,
            [field]: e.target.value,
        });
    };

    useEffect(() => {
        setEditedInfo({
            accessibility_features: schoolInfo.accessibility_features,
            accreditation_number: schoolInfo.accreditation_number,
            accreditation_status: schoolInfo.accreditation_status,
            address_id: schoolInfo.address_id,
            affiliation: schoolInfo.affiliation,
            annual_budget: schoolInfo.annual_budget,
            annual_tuition_fee: schoolInfo.annual_tuition_fee,
            campus_area: schoolInfo.campus_area,
            email: schoolInfo.email,
            established_year: schoolInfo.established_year,
            facilities_number_of_classrooms: schoolInfo.facilities_number_of_classrooms,
            health_services: schoolInfo.health_services,
            hostel_facility: schoolInfo.hostel_facility,
            is_deleted: schoolInfo.is_deleted,
            language_offerings: schoolInfo.language_offerings,
            medium_of_instruction: schoolInfo.medium_of_instruction,
            name: schoolInfo.name,
            number_of_labs: schoolInfo.number_of_labs,
            school_code: schoolInfo.school_code,
            school_level: schoolInfo.school_level,
            school_logo: schoolInfo.school_logo,
            school_manager: schoolInfo.school_manager,
            school_motto: schoolInfo.school_motto,
            school_type: schoolInfo.school_type,
            special_programs: schoolInfo.special_programs,
            sponsorship_details: schoolInfo.sponsorship_details,
            student_gender_ratio: schoolInfo.student_gender_ratio,
            teacher_student_ratio: schoolInfo.teacher_student_ratio,
            total_students: schoolInfo.total_students,
            total_teachers: schoolInfo.total_teachers,
            transport_facility: schoolInfo.transport_facility,
            type: schoolInfo.type,
            website: schoolInfo.website,
        })
    }, [schoolInfo])


    // const handleMottoChange = (e) => {
    //     setSchoolMotto(e.target.value);
    // };

    // const handleSubmit = async (event) => {
    //     event.preventDefault();
    //     alert('Submit Button Clicked')
    //     console.log(schoolInfo)
    //     try{
    //         const response = await axios.put(`http://localhost:3060/api/school/update/${schoolId}`, editedInfo)
    //         if (response.status === 201){
    //             console.log("School Created Successfully")
    //             alert("School Created Successfully")
    //         } else {
    //             console.log("Some bullshit error just occured");
    //             alert("Some bullshit error just occured");
    //         }
    //     } catch(error){
    //         console.error("Error updating schools information: ", error);
    //     }
    //     console.log(editedInfo);
    // }
    
    const handleSubmit = async (event) => {
        event.preventDefault();
        alert('Submit Button Clicked');
        console.log(schoolInfo);
      
        try {
          // Ensure editedInfo includes all required fields
          const updatedData = {
            ...schoolInfo,
            // Add any additional fields needed for update
          };

          console.log("Inner Log");
        //   const response = await axios.put(`http://localhost:3060/api/school/update/${schoolId}`, updatedData);
        //   if (response.status === 200) { // Assuming successful update returns status 200
        //     console.log("School Information Updated Successfully");
        //     // alert("School Information Updated Successfully");
        //   } else {
        //     console.error("Update failed with status:", response.status);
        //     // alert("Failed to update school information. Please try again."); // User feedback
        //   }
        } catch (error) {
          console.error("Error updating school information:", error);
        //   alert("Failed to update school information. Please try again."); // User feedback
        }
      };
      
    
    
    return (
        <div>
            <ColumnWrapper>
                <Heading3 text='School Information' />

                <RowWrapper style={{border:'none',marginBottom: '20px',cursor:'pointer', background: 'rgba(0,200,0,1)', color:'white', borderRadius: '20px', alignItems: 'center', justifyContent: 'center', gap: '5px'}}>
                    <FontAwesomeIcon icon='fa-solid fa-pencil' />
                    <Label text='Editing mode' style={{color:'white', fontWeight: 'bolder'}} />
                </RowWrapper>

                <ColumnWrapper style={styles.container_section_style}>
                    <RowWrapper style={{ border: "none" }}>
                        <FontAwesomeIcon icon='fa-solid fa-chevron-left' style={{ cursor: 'pointer' }} onClick={backHandle} />
                    </RowWrapper>

                    <ColumnWrapper style={styles.school_name_header_style}>
                        <img src={ schoolInfo.school_logo || 'https://th.bing.com/th/id/OIG1.jbQxdyFv6GO9.USaSMR8?w=1024&h=1024&rs=1&pid=ImgDetMain'} alt='School Logo' style={styles.school_logo_header_styles}/>
                        <Heading4 text={schoolInfo.name || 'School Name'}/>
                        <Paragraph text={schoolInfo.school_motto || 'Education For All'} />
                    </ColumnWrapper>

                    <form onSubmit={handleSubmit}>
                        <ColumnWrapper style={styles.card_section_style}>
                            <Heading4 text='Basic Information' />
                            <ColumnWrapper style={styles.info_section_style}>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Name: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.name || ''}
                                        onChange={(e) => handleInputChange(e, 'name')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Code: ' style={styles.labelStyles} />
                                    <InputField
                                        readOnly
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.school_code || ''}
                                        onChange={(e) => handleInputChange(e, 'school_code')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Type: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.type || ''}
                                        onChange={(e) => handleInputChange(e, 'type')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Affiliation: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.affiliation || ''}
                                        onChange={(e) => handleInputChange(e, 'affiliation')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Level: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.school_level || ''}
                                        onChange={(e) => handleInputChange(e, 'school_level')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Established Year: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.established_year || ''}
                                        onChange={(e) => handleInputChange(e, 'established_year')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Accreditation Status: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.accreditation_status || ''}
                                        onChange={(e) => handleInputChange(e, 'accreditation_status')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Motto: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        // value={schoolMotto || ''}
                                        value={schoolInfo.school_motto || ''}
                                        // onChange={handleMottoChange}
                                        onChange={(e) => handleInputChange(e, 'school_motto')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Logo: ' style={styles.labelStyles} />
                                    <img src={schoolInfo.school_logo || 'https://via.placeholder.com/150'} alt='School Logo' style={styles.school_logo_info_styles} />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Website: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.website || ''}
                                        onChange={(e) => handleInputChange(e, 'website')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Email: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.email || ''}
                                        onChange={(e) => handleInputChange(e, 'email')}
                                    />
                                </RowWrapper>
                            </ColumnWrapper>
                        </ColumnWrapper>

                        <ColumnWrapper style={styles.card_section_style}>
                            <Heading4 text='Contact Information' />
                            <ColumnWrapper style={styles.info_section_style}>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Address: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={`${address.city || ''}, ${address.subcity || ''}, ${address.woreda || ''}, ${address.kebele || ''}`}
                                        onChange={(e) => setAddress({ ...address, city: e.target.value })}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Contact Details: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.contact_details || ''}
                                        onChange={(e) => handleInputChange(e, 'contact_details')}
                                    />
                                </RowWrapper>
                            </ColumnWrapper>
                        </ColumnWrapper>

                        <ColumnWrapper style={styles.card_section_style}>
                            <Heading4 text='Facilities and Resources' />
                            <ColumnWrapper style={styles.info_section_style}>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Campus Area: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.campus_area || ''}
                                        onChange={(e) => handleInputChange(e, 'campus_area')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Number of Classrooms: ' style={styles.labelStyles}  />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.facilities_number_of_classrooms || ''}
                                        onChange={(e) => handleInputChange(e, 'facilities_number_of_classrooms')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Number of Labs: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.number_of_labs || ''}
                                        onChange={(e) => handleInputChange(e, 'number_of_labs')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Transport Facility: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.transport_facility ? 'Yes' : 'No'}
                                        onChange={(e) => handleInputChange(e, 'transport_facility')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Hostel Facility: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.hostel_facility ? 'Yes' : 'No'}
                                        onChange={(e) => handleInputChange(e, 'hostel_facility')}
                                    />
                                </RowWrapper>
                            </ColumnWrapper>
                        </ColumnWrapper>

                        <ColumnWrapper style={styles.card_section_style}>
                            <Heading4 text='Student Information' />
                            <ColumnWrapper style={styles.info_section_style}>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Student Enrollment Process: ' style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        style={{flex: 2}}
                                        type='text'
                                        value={schoolInfo.student_enrollment_process || 'N/A'}
                                        onChange={(e) => handleInputChange(e, 'student_enrollment_process')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Student Scholarships: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.student_scholarships || 'N/A'}
                                        onChange={(e) => handleInputChange(e, 'student_scholarships')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Student Associations: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.student_associations || 'N/A'}
                                        onChange={(e) => handleInputChange(e, 'student_associations')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Alumni Network: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.alumni_network || 'N/A'}
                                        onChange={(e) => handleInputChange(e, 'alumni_network')}
                                    />
                                </RowWrapper>
                            </ColumnWrapper>
                        </ColumnWrapper>

                        <RowWrapper style={styles.update_button_container_style}>
                            <PrimaryButton style={{maxWidth:'400px'}}>
                                Update Information
                            </PrimaryButton>
                        </RowWrapper>
                    </form>
                </ColumnWrapper>
            </ColumnWrapper>
        </div>
    );
}

export default EditSchool;

const styles = {
    container_section_style: {
        background: 'rgba(19, 160, 233, 0.076)',
        gap: '20px',
        padding: '20px',
        border: 'none'
    },
    info_section_style: {
        background: 'rgba(0,180,250,0.05)',
        padding: '10px',
        borderRadius: '20px',
        border: 'none',
    },
    card_section_style: {
        padding: '20px',
        border: 'none',
        borderRadius: '30px',
        background: 'white'
    },
    information_row: {
        background: 'rgba(0,150,200,0.05)',
        marginTop: '3px',
        marginBottom: '3px',
        justifyContent: 'space-between',
        
        alignItems: 'center',
        gap: '10px',
        border: 'none'
    },
    school_name_header_style: {
        alignItems: 'center',
        border: 'none',
    },
    school_logo_header_styles: {
        borderRadius: '50%',
        maxWidth: '100px'
    },

    school_logo_info_styles: {
        maxWidth: '200px',
    },
    labelStyles: {
        // background: 'red',
        width: '40%'
    },
    update_button_container_style: {
        justifyContent:'center',
        alignItems:'center', 
        border:'none',
        gap:'30px'
    }
}
import React, { useEffect, useState } from 'react';
import ColumnWrapper from '../../../../components/column_wrapper';
import RowWrapper from '../../../../components/row_wrapper';
import { PrimaryButton, SecondaryButton, DangerButton } from '../../../../components/buttons';
import { Heading2, Heading3, Heading4, Label, Paragraph } from '../../../../components/Typography';
import { useNavigate, useParams } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { InputField } from '../../../../components/input_field';
import "../../../../styles/admin-dashboard/edit_field.css"
import { color } from 'chart.js/helpers';
import api from '../../../../api';
import axios from 'axios';
import Select from 'react-select'

function EditSchool() {
    const apiURL = import.meta.env.VITE_API_URL;
    
    const [schoolInfo, setSchoolInfo] = useState({
        name: '',
        established_year: '',
        // type: '',
        website: '',
        school_level: '',
        is_deleted: false,
        school_code: '',
        medium_of_instruction: '',
        total_students: 0,
        affiliation: '',
        total_teachers: 0,
        accreditation_status: '',
        campus_area: '',
        facilities_number_of_classrooms: 0,
        number_of_labs: 0,
        annual_budget: 0,
        school_motto: '',
        school_logo: '',
        school_type: '',
        language_offerings: '',
        transport_facility: false,
        hostel_facility: false,
        health_services: false,
        school_manager: '',
        accreditation_number: '',
        sponsorship_details: '',
        annual_tuition_fee: 0,
        student_gender_ratio: '',
        teacher_student_ratio: '',
        special_programs: '',
        accessibility_features: '',
    });
    const [address, setAddress] = useState({});
    const [schoolStatus, setSchoolStatus] = useState(''); // [schoolStatus]
    // const [schoolMotto, setSchoolMotto] = useState('');
    const [editedInfo, setEditedInfo] = useState()

    const { schoolId } = useParams();

    const getSchoolInfo = async (schoolId) => {
        try {
            const response = await fetch(`${apiURL}/api/school/load/${schoolId}`);
            const data = await response.json();
            setSchoolInfo(data);
            // setSchoolMotto(data.school_motto || '');
        } catch (error) {
            console.error("Error fetching school information: ", error);
        }
    };

    useEffect(() => {
        getSchoolInfo(schoolId);
    }, [schoolId]);

    const getAddress = async (addressId) => {
        try {
            const response = await fetch(`${apiURL}/api/address/load/${addressId}`);
            const data = await response.json();
            setAddress(data);
        } catch (err) {
            console.error("Error fetching address: ", err);
        }
    };

    useEffect(() => {
        if (schoolInfo.address_id) {
            console.log("Fetching address with ID:", schoolInfo.address_id);
            getAddress(schoolInfo.address_id);
        } else {
            console.error("Invalid address_id:", schoolInfo.address_id);
        }
    }, [schoolInfo.address_id]);

    const backHandle = () => {
        history.back();
    };

    const handleInputChange = (e, field) => {
        setSchoolInfo({
            ...schoolInfo,
            [field]: e.target.value,
        });
    };

    useEffect(() => {
        setEditedInfo({
            accessibility_features: schoolInfo.accessibility_features,
            accreditation_number: schoolInfo.accreditation_number,
            accreditation_status: schoolInfo.accreditation_status,
            address_id: schoolInfo.address_id,
            affiliation: schoolInfo.affiliation,
            annual_budget: schoolInfo.annual_budget,
            annual_tuition_fee: schoolInfo.annual_tuition_fee,
            campus_area: schoolInfo.campus_area,
            email: schoolInfo.email,
            established_year: schoolInfo.established_year,
            facilities_number_of_classrooms: schoolInfo.facilities_number_of_classrooms,
            health_services: schoolInfo.health_services,
            hostel_facility: schoolInfo.hostel_facility,
            is_deleted: schoolInfo.is_deleted,
            language_offerings: schoolInfo.language_offerings,
            medium_of_instruction: schoolInfo.medium_of_instruction,
            name: schoolInfo.name,
            number_of_labs: schoolInfo.number_of_labs,
            school_code: schoolInfo.school_code,
            school_level: schoolInfo.school_level,
            school_logo: schoolInfo.school_logo,
            school_manager: schoolInfo.school_manager,
            school_motto: schoolInfo.school_motto,
            school_type: schoolInfo.school_type,
            special_programs: schoolInfo.special_programs,
            sponsorship_details: schoolInfo.sponsorship_details,
            student_gender_ratio: schoolInfo.student_gender_ratio,
            teacher_student_ratio: schoolInfo.teacher_student_ratio,
            total_students: schoolInfo.total_students,
            total_teachers: schoolInfo.total_teachers,
            transport_facility: schoolInfo.transport_facility,
            type: schoolInfo.type,
            website: schoolInfo.website,
            status: schoolStatus || schoolInfo.status,
        })
    }, [schoolInfo,schoolStatus])


    // const handleMottoChange = (e) => {
    //     setSchoolMotto(e.target.value);
    // };

    // const handleSubmit = async (event) => {
    //     event.preventDefault();
    //     alert('Submit Button Clicked')
    //     console.log(schoolInfo)
    //     try{
    //         const response = await axios.put(`${apiURL}/api/school/update/${schoolId}`, editedInfo)
    //         if (response.status === 201){
    //             console.log("School Created Successfully")
    //             alert("School Created Successfully")
    //         } else {
    //             console.log("Some bullshit error just occured");
    //             alert("Some bullshit error just occured");
    //         }
    //     } catch(error){
    //         console.error("Error updating schools information: ", error);
    //     }
    //     console.log(editedInfo);
    // }
    const navigate = useNavigate();
    const handleSubmit = async (event) => {
        event.preventDefault();
        alert('Submit Button Clicked');
        console.log(schoolInfo);

        try {
          // Ensure editedInfo includes all required fields
          const updatedData = {
            ...editedInfo,
            // schoolStatus,
            // Add any additional fields needed for update
          };

          console.log('Logging from inside');
          console.log(updatedData);

          const response = await axios.put(`${apiURL}/api/school/update/${schoolId}`, updatedData);
          if (response.status === 200) { // Assuming successful update returns status 200
            console.log("School Information Updated Successfully");
            navigate(`/admin/school/view/${schoolId}`)
            // alert("School Information Updated Successfully");
          } else {
            console.error("Update failed with status:", response.status);
            // alert("Failed to update school information. Please try again."); // User feedback
          }
        } catch (error) {
          console.error("Error updating school information:", error);
        //   alert("Failed to update school information. Please try again."); // User feedback
        }
      };
      
    
    
    return (
        <div>
            <ColumnWrapper>
                <Heading3 text='School Information' />

                <RowWrapper style={{

                    border:'none',
                    marginBottom: '20px',
                    cursor:'pointer',
                    background: 'rgba(0,200,0,1)',
                    color:'white', 
                    borderRadius: '20px',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: '5px',
                    // background: 'red',
                     
                    }}>

                    <FontAwesomeIcon icon='fa-solid fa-pencil' />
                    <Label text='Editing mode' style={{color:'white', fontWeight: 'bolder'}} />
                </RowWrapper>

                <ColumnWrapper style={styles.container_section_style}>
                    <RowWrapper style={{ border: "none" }}>
                        <FontAwesomeIcon icon='fa-solid fa-chevron-left' style={{ cursor: 'pointer' }} onClick={backHandle} />
                    </RowWrapper>

                    <ColumnWrapper style={styles.school_name_header_style}>
                        <img src={ schoolInfo.school_logo || 'https://th.bing.com/th/id/OIG1.jbQxdyFv6GO9.USaSMR8?w=1024&h=1024&rs=1&pid=ImgDetMain'} alt='School Logo' style={styles.school_logo_header_styles}/>
                        <Heading4 text={schoolInfo.name || 'School Name'}/>
                        <Paragraph text={schoolInfo.school_motto || 'Education For All'} />
                    </ColumnWrapper>

                    <form onSubmit={handleSubmit}>
                        <ColumnWrapper style={styles.card_section_style}>
                            <Heading4 text='Basic Information' />
                            <ColumnWrapper style={styles.info_section_style}>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Name: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.name || ''}
                                        onChange={(e) => handleInputChange(e, 'name')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Code: ' style={styles.labelStyles} />
                                    <InputField
                                        readOnly
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.school_code || ''}
                                        onChange={(e) => handleInputChange(e, 'school_code')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Type: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.type || ''}
                                        onChange={(e) => handleInputChange(e, 'type')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Affiliation: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.affiliation || ''}
                                        onChange={(e) => handleInputChange(e, 'affiliation')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Level: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.school_level || ''}
                                        onChange={(e) => handleInputChange(e, 'school_level')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Established Year: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.established_year || ''}
                                        onChange={(e) => handleInputChange(e, 'established_year')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Accreditation Status: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.accreditation_status || ''}
                                        onChange={(e) => handleInputChange(e, 'accreditation_status')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Motto: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        // value={schoolMotto || ''}
                                        value={schoolInfo.school_motto || ''}
                                        // onChange={handleMottoChange}
                                        onChange={(e) => handleInputChange(e, 'school_motto')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='School Logo: ' style={styles.labelStyles} />
                                    <img src={schoolInfo.school_logo || 'https://via.placeholder.com/150'} alt='School Logo' style={styles.school_logo_info_styles} />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Website: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.website || ''}
                                        onChange={(e) => handleInputChange(e, 'website')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Email: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.email || ''}
                                        onChange={(e) => handleInputChange(e, 'email')}
                                    />
                                </RowWrapper>
                            </ColumnWrapper>
                        </ColumnWrapper>

                        <ColumnWrapper style={styles.card_section_style}>
                            <Heading4 text='Contact Information' />
                            <ColumnWrapper style={styles.info_section_style}>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Address: '  style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={`${address.city || ''}, ${address.subcity || ''}, ${address.woreda || ''}, ${address.kebele || ''}`}
                                        onChange={(e) => setAddress({ ...address, city: e.target.value })}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Contact Details: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.contact_details || ''}
                                        onChange={(e) => handleInputChange(e, 'contact_details')}
                                    />
                                </RowWrapper>
                            </ColumnWrapper>
                        </ColumnWrapper>

                        <ColumnWrapper style={styles.card_section_style}>
                            <Heading4 text='Facilities and Resources' />
                            <ColumnWrapper style={styles.info_section_style}>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Campus Area: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.campus_area || ''}
                                        onChange={(e) => handleInputChange(e, 'campus_area')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Number of Classrooms: ' style={styles.labelStyles}  />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.facilities_number_of_classrooms || ''}
                                        onChange={(e) => handleInputChange(e, 'facilities_number_of_classrooms')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Number of Labs: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.number_of_labs || ''}
                                        onChange={(e) => handleInputChange(e, 'number_of_labs')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Transport Facility: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.transport_facility ? 'Yes' : 'No'}
                                        onChange={(e) => handleInputChange(e, 'transport_facility')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Hostel Facility: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.hostel_facility ? 'Yes' : 'No'}
                                        onChange={(e) => handleInputChange(e, 'hostel_facility')}
                                    />
                                </RowWrapper>
                            </ColumnWrapper>
                        </ColumnWrapper>

                        {/* <ColumnWrapper style={styles.card_section_style}>
                            <Heading4 text='Student Information' />
                            <ColumnWrapper style={styles.info_section_style}>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Student Enrollment Process: ' style={styles.labelStyles}/>
                                    <InputField
                                        className = 'edit_field'
                                        style={{flex: 2}}
                                        type='text'
                                        value={schoolInfo.student_enrollment_process || 'N/A'}
                                        onChange={(e) => handleInputChange(e, 'student_enrollment_process')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Student Scholarships: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.student_scholarships || 'N/A'}
                                        onChange={(e) => handleInputChange(e, 'student_scholarships')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Student Associations: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.student_associations || 'N/A'}
                                        onChange={(e) => handleInputChange(e, 'student_associations')}
                                    />
                                </RowWrapper>
                                <RowWrapper style={styles.information_row}>
                                    <Label text='Alumni Network: ' style={styles.labelStyles} />
                                    <InputField
                                        className = 'edit_field'
                                        type='text'
                                        value={schoolInfo.alumni_network || 'N/A'}
                                        onChange={(e) => handleInputChange(e, 'alumni_network')}
                                    />
                                </RowWrapper>
                            </ColumnWrapper>
                        </ColumnWrapper> */}

                        <ColumnWrapper style={styles.card_section_style}>
                            <Heading4 text='School Status' />
                            <RowWrapper style={styles.information_row}>
                                <Label text='Current School Status: ' />
                                {/* <Paragraph text={schoolInfo.status || 'N/A'} /> */}
                                <Paragraph text={schoolStatus || schoolInfo.status || 'N/A'} />
                            </RowWrapper>

                            <RowWrapper style={styles.information_row}>
                                <Label text='Change School Status: ' />
                                <Select
                                    placeholder='Change School Status'
                                    options= {schoolStatusOption}
                                    // value={schoolStatus || schoolInfo.status || 'N/A'}
                                    onChange={(option) => setSchoolStatus(option.value)}
                                
                                ></Select>
                            </RowWrapper>
                        </ColumnWrapper>

                        <RowWrapper style={styles.update_button_container_style}>
                            <PrimaryButton style={{maxWidth:'400px'}}>
                                Update Information
                            </PrimaryButton>
                        </RowWrapper>
                    </form>
                </ColumnWrapper>
            </ColumnWrapper>
        </div>
    );
}

export default EditSchool;

const schoolStatusOption = [
    {value: 'active', label: 'Active'},
    {value: 'pending', label: 'Pending'},
    // {value: 'inactive', label: 'Inactive'},
    {value: 'deleted', label: 'Deleted'},
    {value: 'archived', label: 'Archived'}
]
const styles = {
    container_section_style: {
        background: 'rgba(19, 160, 233, 0.076)',
        gap: '20px',
        padding: '20px',
        border: 'none'
    },
    info_section_style: {
        background: 'rgba(0,180,250,0.05)',
        padding: '10px',
        borderRadius: '20px',
        border: 'none',
    },
    card_section_style: {
        padding: '20px',
        border: 'none',
        borderRadius: '30px',
        background: 'white'
    },
    information_row: {
        background: 'rgba(0,150,200,0.05)',
        marginTop: '3px',
        marginBottom: '3px',
        justifyContent: 'space-between',
        
        alignItems: 'center',
        gap: '10px',
        border: 'none'
    },
    school_name_header_style: {
        alignItems: 'center',
        border: 'none',
    },
    school_logo_header_styles: {
        borderRadius: '50%',
        maxWidth: '100px'
    },

    school_logo_info_styles: {
        maxWidth: '200px',
    },
    labelStyles: {
        // background: 'red',
        width: '40%'
    },
    update_button_container_style: {
        justifyContent:'center',
        alignItems:'center', 
        border:'none',
        gap:'30px'
    }
}

/*

{
accessibility_features : ""
accreditation_number : ""
accreditation_status: "Accrediated"
address_id : "9d068cb1-1d70-4edf-b1ba-49c50fd2e1a3"
affiliation : ""
annual_budget : "0"
annual_tuition_fee : "0"
campus_area : ""
createdAt : "2024-08-08T10:16:45.000Z"
email : "damoze@gmail.com"
established_year : 2002
facilities_number_of_classrooms : 0
health_services : false
hostel_facility : false
is_deleted : false
language_offerings : ""
medium_of_instruction : ""
name : "Damoze Baaduu Bet"
number_of_labs : 0
school_code : "BSR005"
school_id : "2e867621-9474-405e-aea9-71ae85fb4836"
school_level : "High School"
school_logo : ""
school_manager : ""
school_motto : ""
school_type : ""
special_programs : ""
sponsorship_details : ""
student_gender_ratio : ""
teacher_student_ratio: ""
total_students: 0
total_teachers: 0
transport_facility: false
type: "Public"
updatedAt: "2024-08-08T10:16:45.000Z"
website: ""
}

*/import React, { useEffect, useState } from 'react'
import ColumnWrapper from '../../../../components/column_wrapper'
import RowWrapper from '../../../../components/row_wrapper'
import { CenterColumn, CenterRow } from '../../../../components/center'
import { PrimaryButton, SecondaryButton, DangerButton } from '../../../../components/buttons'
import { Heading2, Heading3, Heading4, Label, Paragraph } from '../../../../components/Typography'
import { Link, Outlet, useLocation, useParams } from 'react-router-dom'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
// import { Outlet } from 'react-router-dom'

function ViewSchool() {

    const apiURL = import.meta.env.VITE_API_URL;
    
    const { schoolId } = useParams();
    const [schoolInfo, setSchoolInfo] = useState({});
    const location = useLocation();
    
    const onDetailsPage = location.pathname.endsWith('/details')
    const onStudentsPage = (location.pathname.endsWith('/students'))
    const onTeachersPage = (location.pathname.endsWith('/teachers'))
    const onDepartmentsPage = (location.pathname.endsWith('/departments'))
    const onClubsPage = (location.pathname.endsWith('/clubs'))
    const onEventsPage = (location.pathname.endsWith('/events'))
    const onExtraPage = (location.pathname.endsWith('/extras'))

    useEffect(() => {
        const fetchSchoolInfo = async () => {
            try {
                const response = await fetch(`${apiURL}/api/school/load/${schoolId}`);
                const data = await response.json();
                setSchoolInfo(data);
            } catch (error) {
                console.error("Error fetching school information: ", error);
            }
        };

        fetchSchoolInfo();
    }, [schoolId]);

    const backHandle = () => {history.back()};
    return (
        <div>
            <ColumnWrapper>
                <Heading3 text='School Information'/>

                <ColumnWrapper style={styles.container_section_style}>
                    <RowWrapper style={{border:"none",}}>
                        <FontAwesomeIcon icon='fa-solid fa-chevron-left' style={{cursor: 'pointer'}} onClick={backHandle}/>
                    </RowWrapper>
                    <ColumnWrapper style={styles.school_name_header_style}>
                        <img src={ schoolInfo.school_logo || 'https://th.bing.com/th/id/OIG1.jbQxdyFv6GO9.USaSMR8?w=1024&h=1024&rs=1&pid=ImgDetMain'} alt='School Logo' style={styles.school_logo_header_styles}/>
                        <Heading4 text={schoolInfo.name || 'School Name'}/>
                        <Paragraph text={schoolInfo.school_motto || 'Education For All'} />
                    </ColumnWrapper>
                    
                    <RowWrapper style={{ marginTop: '20px', gap: '15px', height: '50px',border: 'none',}}>

                        <Link to={`/admin/school/view/${schoolId}/details`}> 
                            <button 
                            className={'schoolButtonStyle details-button '+(onDetailsPage && 'selected-button')}>
                                School Details
                            </button>
                        </Link>
                       
                        <Link to={`/admin/school/view/${schoolId}/students`}> 
                            <button 
                                className={'schoolButtonStyle students-button ' +(onStudentsPage && 'selected-button')}>
                                    Students
                            </button>
                        </Link>
                        
                        <Link to={`/admin/school/view/${schoolId}/teachers`}> 
                            <button className={'schoolButtonStyle teachers-button ' +(onTeachersPage && 'selected-button')} >
                                Teachers
                            </button>
                        </Link>
                        
                        <Link to={`/admin/school/view/${schoolId}/departments`}> 
                            <button className={'schoolButtonStyle departments-button ' +(onDepartmentsPage && 'selected-button')}>
                                Departments
                            </button>
                        </Link>
                        
                        <Link to={`/admin/school/view/${schoolId}/clubs`}> 
                            <button className={'schoolButtonStyle clubs-button ' +(onClubsPage && 'selected-button')}>
                                Clubs
                            </button>
                        </Link>

                        <Link to={`/admin/school/view/${schoolId}/events`}> 
                            <button className={'schoolButtonStyle events-button ' +(onEventsPage && 'selected-button')}>
                                Events
                            </button>
                        </Link>

                        <Link to={`/admin/school/view/${schoolId}/extras`}>
                            <button className={'schoolButtonStyle extra-activities-button ' +(onExtraPage && 'selected-button')}>
                                Extra Activities
                            </button>
                        </Link>

                    </RowWrapper>
                    <div className="school-info-containe">
                        <Outlet />
                    </div>
                
                </ColumnWrapper>
            </ColumnWrapper>
        </div>
    )
}

const styles = {
    container_section_style: {
        background: 'rgba(19, 160, 233, 0.076)',
        gap: '20px',
        padding: '20px',
        border: 'none'
    },
    info_section_style: {
        background: 'rgba(0,180,250,0.05)',
        padding: '10px',
        borderRadius: '20px',
        border: 'none',
    },
    card_section_style: {
        padding: '20px',
        border: 'none',
        borderRadius: '30px',
        background: 'white'
    },
    information_row: {
        background: 'rgba(0,150,200,0.05)',
        marginTop: '3px',
        marginBottom: '3px',
        justifyContent: 'space-between',
        alignItems: 'center',
        gap: '10px',
        border: 'none'
    },
    school_name_header_style: {
        alignItems: 'center',
        border: 'none',
    },
    school_logo_header_styles: {
        borderRadius: '50%',
        maxWidth: '100px'
    },

    school_logo_info_styles: {
        maxWidth: '200px',
    },
}

export default ViewSchool
import React, { useEffect, useState } from 'react'
import { Heading4, } from '../../../../components/Typography'
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import '../../../../styles/admin-school.css'
import '../../../../styles/admin-school.css'
import { Link, Outlet, useLocation } from 'react-router-dom';
import ViewSchool from './view-school';
// import SchoolListing from './school-pages/school-listing';
import { useNavigate } from 'react-router-dom';
import RowWrapper from '../../../../components/row_wrapper';
import { PrimaryButton, SecondaryButton } from '../../../../components/buttons';
import './button-styles.css'
import { HorizontalLine } from '../../../../components/line_separator';


library.add(fas)

function SchoolListing() {

  const apiURL = import.meta.env.VITE_API_URL;

  const [schools, setSchools] = useState([])
  const location = useLocation();

  const onAllPage = (location.pathname === ('/admin/school/listing/all'))
  const onActivePage = (location.pathname === ('/admin/school/listing/active'))
  const onPendingPage = (location.pathname === ('/admin/school/listing/pending'))
  const onDeletedPage = (location.pathname === ('/admin/school/listing/deleted'))
  const onArchivedPage = (location.pathname === ('/admin/school/listing/archived'))

  const getSchools = async () => {
    try {
      const response = await fetch(`${apiURL}/api/school/load`);
      const data = await response.json();
      setSchools(data);
    } catch (error) {
      console.error('Error fetching schools:', error);
    }
  };

  useEffect(() => {
    getSchools()
  }, []);

  const schoolHeadings = ['School Code', 'School Name', 'Type', 'Action']
  
const navigate = useNavigate();

  const handleEdit = (schoolID) => {
    // console.log('Editing school with ID:', schoolID);
    navigate(`/admin/school/edit/${schoolID}`)
  };

// const handleView = (schoolCode) => {
//   console.log('Viewing school with code:', schoolCode);
// };

  const handleView = (schoolID) => {
    // alert('ViewSchool')
    navigate(`/admin/school/view/${schoolID}`)
  }

  return (
    <div>
      <Heading4 text='School Listing' />

      {/* {location.pathname === '/admin/school/listing/all' && <h1>All Listing</h1>} */}
      {/* {onAllPage && <h1>All Listing</h1>}
      {onActivePage && <h1>Active Listing</h1>}
      {onPendingPage && <h1>Pending Listing</h1>}
      {onDeletedPage && <h1>Deleted Listing</h1>}
      {onArchivedPage && <h1>Archived Listing</h1>} */}

      <HorizontalLine
        style={{
          background: 'rgba(0,150,255,0.82)',
          marginTop: '5px',
        }} 
      />
      
      <RowWrapper style={{ 
        marginTop: '20px', 
        gap: '15px', 
        height: '50px',
        border: 'none',
        }}>
        {/* <SecondaryButton>All Schools </SecondaryButton> */}

        <Link to='/admin/school/listing/all'> 
          <button className={'schoolButtonStyle all-schools '+ (onAllPage && 'selected-button')}>
            All Schools
          </button>
        </Link>
        <Link to='/admin/school/listing/active'> 
          <button className={'schoolButtonStyle active-schools '+ (onActivePage && 'selected-button')}>
            Active Schools
          </button>
        </Link>
        <Link to='/admin/school/listing/pending'> 
          <button className={'schoolButtonStyle pending-schools '+ (onPendingPage && 'selected-button')}>
            Pending Schools
          </button>
        </Link>
        <Link to='/admin/school/listing/deleted'> 
          <button className={'schoolButtonStyle deleted-schools '+ (onDeletedPage && 'selected-button')}>
            Deleted Schools
          </button>
        </Link>
        <Link to='/admin/school/listing/archived'> 
          <button className={'schoolButtonStyle archived-schools '+ (onArchivedPage && 'selected-button')}>
            Archived Schools
          </button>
        </Link>

      </RowWrapper>
      {/* <div className='school-listing-container'>
        <table className='school-data-table' style={{width:'100%'}}>
          <thead>
            <tr>
              {schoolHeadings.map((heading, index) => (
                <th key={index}>{heading}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {schools.map((school, index) => (
              <tr key={index}>
                <td>{school.school_code}</td>
                <td>{school.name}</td>
                <td>{school.type}</td>
                <td className='actions'>
                  <button onClick={() => handleEdit(school.school_id)}>
                    <FontAwesomeIcon icon='fa-solid fa-pencil' />
                    Edit
                  </button>

                  <button onClick={() => handleView(school.school_id)}>
                    <FontAwesomeIcon icon='fa-solid fa-eye' />
                    View
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div> */}
      <div className="school-listing-container">
        <Outlet />
      </div>
    </div>
  )
}

const styles = {
  school_listing_button_style:{
    width: '150px',
    borderRadius: '5px',
    background: 'rgba(0,140,200,0.11)',
    border: '1px solid rgb(0,140,200)',
    fontWeight: 'normal',
    color: 'rgb(0,140,200)',
    // border: '2px solid black'
  }
}

export default SchoolListing;import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom';

import SchoolListing from '../../../../../components/school-components/school_listings';
import '../../../../../styles/admin-school.css'
import '../button-styles.css'

function DeletedSchoolListing() {
  const apiURL = import.meta.env.VITE_API_URL;

  const [schools, setSchools] = useState([])
  const getSchools = async () => {
    try {
      const response = await fetch(`${apiURL}/api/school/load/deleted`);
      const data = await response.json();
      setSchools(data);
    } catch (error) {
      console.error('Error fetching schools:', error);
    }
  };

  useEffect(() => {
    getSchools()
  }, []);

  const schoolHeadings = ['School Code', 'School Name', 'Type', 'Action']

const navigate = useNavigate();

  const handleEdit = (schoolID) => {
    navigate(`/admin/school/edit/${schoolID}`)
  };

  const handleView = (schoolID) => {
    navigate(`/admin/school/view/${schoolID}`)
  }

  return (
    <SchoolListing 
      title='Deleted School'
      schools={schools}
      handleEdit={handleEdit}
      handleView={handleView}
    />
  )
}

export default DeletedSchoolListing;import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom';

import SchoolListing from '../../../../../components/school-components/school_listings';
import '../../../../../styles/admin-school.css'
import '../button-styles.css'

function AllSchoolListing() {

  const apiURL = import.meta.env.VITE_API_URL;

  const [schools, setSchools] = useState([])
  const getSchools = async () => {
    try {
      const response = await fetch(`${apiURL}/api/school/load`);
      const data = await response.json();
      setSchools(data);
    } catch (error) {
      console.error('Error fetching schools:', error);
    }
  };

  useEffect(() => {
    getSchools()
  }, []);

  const schoolHeadings = ['School Code', 'School Name', 'Type', 'Action']

const navigate = useNavigate();

  const handleEdit = (schoolID) => {
    navigate(`/admin/school/edit/${schoolID}`)
  };

  const handleView = (schoolID) => {
    navigate(`/admin/school/view/${schoolID}`)
  }

  return (
    <SchoolListing
    title="All School Listing"
    schools={schools}
    handleEdit={handleEdit}
    handleView={handleView}
    />
  )
}

export default AllSchoolListing;import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom';

import SchoolListing from '../../../../../components/school-components/school_listings';
import '../../../../../styles/admin-school.css'
import '../button-styles.css'

function ArchivedSchoolListing() {

  const apiURL = import.meta.env.VITE_API_URL;

  const [schools, setSchools] = useState([])
  const getSchools = async () => {
    try {
      const response = await fetch(`${apiURL}/api/school/load/archived`);
      const data = await response.json();
      setSchools(data);
    } catch (error) {
      console.error('Error fetching schools:', error);
    }
  };

  useEffect(() => {
    getSchools()
  }, []);

  const schoolHeadings = ['School Code', 'School Name', 'Type', 'Action']

const navigate = useNavigate();

  const handleEdit = (schoolID) => {
    navigate(`/admin/school/edit/${schoolID}`)
  };

  const handleView = (schoolID) => {
    navigate(`/admin/school/view/${schoolID}`)
  }

  return (
    <SchoolListing 
    title={'Archived School Listing'}
    schools={schools}
    handleEdit={handleEdit}
    handleView={handleView}
    />
  )
}

export default ArchivedSchoolListing;import React, { useEffect, useState } from 'react'
import { Heading5, } from '../../../../../components/Typography'
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import '../../../../../styles/admin-school.css'
import { useNavigate } from 'react-router-dom';
import RowWrapper from '../../../../../components/row_wrapper';
import '../button-styles.css'

library.add(fas)

function ActiveSchoolListing() {

  const apiURL = import.meta.env.VITE_API_URL;

  const [schools, setSchools] = useState([])
  const getSchools = async () => {
    try {
      const response = await fetch(`${apiURL}/api/school/load/active`);
      const data = await response.json();
      setSchools(data);
    } catch (error) {
      console.error('Error fetching schools:', error);
    }
  };
  useEffect(() => {
    getSchools()
  }, []);

  // console.log('Vite App', )

  const schoolHeadings = ['School Code', 'School Name', 'Type', 'Action']

// const schoolData = [
//   { 'School Code': 'ADS-001', 'School Name': 'Adama Primary School', 'Type': 'Public' },
//   { 'School Code': 'BHS-002', 'School Name': 'Bright Horizons School', 'Type': 'Private' },
//   { 'School Code': 'CPS-003', 'School Name': 'Cedar Park School', 'Type': 'Public' },
//   { 'School Code': 'DLS-004', 'School Name': 'Dawn Learning School', 'Type': 'Private' },
//   { 'School Code': 'EPS-005', 'School Name': 'Eagle Primary School', 'Type': 'Public' },
//   { 'School Code': 'FCS-006', 'School Name': 'Future Creators School', 'Type': 'Private' },
//   { 'School Code': 'GSS-007', 'School Name': 'Greenfield Secondary School', 'Type': 'Public' },
//   { 'School Code': 'HIS-008', 'School Name': 'Hope International School', 'Type': 'Private' },
//   { 'School Code': 'ISS-009', 'School Name': 'Inspire Secondary School', 'Type': 'Public' },
//   { 'School Code': 'JPS-010', 'School Name': 'Joyful Primary School', 'Type': 'Private' },
// ];
const navigate = useNavigate();

  const handleEdit = (schoolID) => {
    // console.log('Editing school with ID:', schoolID);
    navigate(`/admin/school/edit/${schoolID}`)
  };

// const handleView = (schoolCode) => {
//   console.log('Viewing school with code:', schoolCode);
// };

  const handleView = (schoolID) => {
    // alert('ViewSchool')
    navigate(`/admin/school/view/${schoolID}`)
  }

  return (
    <div>
      <Heading5 text='Active School Listing' />

      <div className='school-listing-container'>
        <table className='school-data-table' style={{width:'100%'}}>
          <thead>
            <tr>
              {schoolHeadings.map((heading, index) => (
                <th key={index}>{heading}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {schools.map((school, index) => (
              <tr key={index}>
                {/* {
                  Object.values(data).map((value, idx) => (
                    <td key={idx}>{value}</td>
                  ))
                } */}
                <td>{school.school_code}</td>
                <td>{school.name}</td>
                <td>{school.type}</td>
                <td className='actions'>
                  <button onClick={() => handleEdit(school.school_id)}>
                    <FontAwesomeIcon icon='fa-solid fa-pencil' />
                    Edit
                  </button>

                  {/* <button onClick={() => handleView(data['school_id'])}>
                    <FontAwesomeIcon icon='fa-solid fa-eye' />
                    View
                  </button> */}
                  <button onClick={() => handleView(school.school_id)}>
                    <FontAwesomeIcon icon='fa-solid fa-eye' />
                    View
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

const styles = {
  school_listing_button_style:{
    width: '150px',
    borderRadius: '5px',
    background: 'rgba(0,140,200,0.11)',
    border: '1px solid rgb(0,140,200)',
    fontWeight: 'normal',
    color: 'rgb(0,140,200)',
  }
}

export default ActiveSchoolListing;import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom';

import SchoolListing from '../../../../../components/school-components/school_listings';
import '../../../../../styles/admin-school.css'
import '../button-styles.css'

// library.add(fas)

function PendingSchoolListing() {

  const apiURL = import.meta.env.VITE_API_URL;

  const [schools, setSchools] = useState([])
  const getSchools = async () => {
    try {
      const response = await fetch(`${apiURL}/api/school/load/pending`);
      const data = await response.json();
      setSchools(data);
    } catch (error) {
      console.error('Error fetching schools:', error);
    }
  };

  useEffect(() => {
    getSchools()
  }, []);

  const schoolHeadings = ['School Code', 'School Name', 'Type', 'Action']

// const schoolData = [
//   { 'School Code': 'ADS-001', 'School Name': 'Adama Primary School', 'Type': 'Public' },
//   { 'School Code': 'BHS-002', 'School Name': 'Bright Horizons School', 'Type': 'Private' },
//   { 'School Code': 'CPS-003', 'School Name': 'Cedar Park School', 'Type': 'Public' },
//   { 'School Code': 'DLS-004', 'School Name': 'Dawn Learning School', 'Type': 'Private' },
//   { 'School Code': 'EPS-005', 'School Name': 'Eagle Primary School', 'Type': 'Public' },
//   { 'School Code': 'FCS-006', 'School Name': 'Future Creators School', 'Type': 'Private' },
//   { 'School Code': 'GSS-007', 'School Name': 'Greenfield Secondary School', 'Type': 'Public' },
//   { 'School Code': 'HIS-008', 'School Name': 'Hope International School', 'Type': 'Private' },
//   { 'School Code': 'ISS-009', 'School Name': 'Inspire Secondary School', 'Type': 'Public' },
//   { 'School Code': 'JPS-010', 'School Name': 'Joyful Primary School', 'Type': 'Private' },
// ];
const navigate = useNavigate();

  const handleEdit = (schoolID) => {
    // console.log('Editing school with ID:', schoolID);
    navigate(`/admin/school/edit/${schoolID}`)
  };

// const handleView = (schoolCode) => {
//   console.log('Viewing school with code:', schoolCode);
// };

  const handleView = (schoolID) => {
    // alert('ViewSchool')
    navigate(`/admin/school/view/${schoolID}`)
  }

  return (
    <SchoolListing 
    title='Pending Schools Listing'
    schools={schools}
    handleEdit={handleEdit}
    handleView={handleView}
    />
  )
}

const styles = {
  school_listing_button_style:{
    width: '150px',
    borderRadius: '5px',
    background: 'rgba(0,140,200,0.11)',
    border: '1px solid rgb(0,140,200)',
    fontWeight: 'normal',
    color: 'rgb(0,140,200)',
  }
}

export default PendingSchoolListing;import React from 'react'

function SchoolDepartments() {
  return (
    <>
      <div>SchoolDepartments</div>
      <h1>Departments</h1>
    </>
  )
}

export default SchoolDepartmentsimport React from 'react'

function SchoolTeachers() {
  return (
    <>
      <div>SchoolTeachers</div>
      <h1>Teachers</h1>
    </>
  )
}

export default SchoolTeachers;import React from 'react'

function SchoolExtras() {
  return (
    <>
      <div>SchoolExtras</div>
      <h1>Extra Activities</h1>
    </>
  )
}

export default SchoolExtrasimport React from 'react'

function SchoolClubs() {
  return (
    <>
      <div>SchoolClubs</div>
      <h1>Clubs</h1>
    </>
  )
}

export default SchoolClubs;import React from 'react'
import { useLocation } from 'react-router-dom'

function SchoolStudents() {
    const location = useLocation();

  return (
    <>
    <div>SchoolStudents</div>
    <div>
        {location.pathname.endsWith('/students') && <h1>Students</h1>}
    </div>
    </>
  )
}

export default SchoolStudentsimport React from 'react'

function SchoolEvents() {
  return (
    <>
      <div>SchoolEvents</div>
      <h1>Events</h1>
    </>
  )
}

export default SchoolEventsimport React, { useEffect, useState } from 'react';
import ColumnWrapper from '../../../../../components/column_wrapper';
import RowWrapper from '../../../../../components/row_wrapper';
import { Heading4, Label, Paragraph } from '../../../../../components/Typography';
import { Link, useParams } from 'react-router-dom';
import { SecondaryButton } from '../../../../../components/buttons';
// import jwtDecode from "jwt-decode"

function SchoolDetails() {

    // const token = localStorage.getItem('token');
    // // const navigate = useNavigate();
    // const tokendata = token && jwtDecode(token);

    
    // // const tokendata = token.toString;
    // const uname = tokendata.username;
    
    const [schoolInfo, setSchoolInfo] = useState({});
    const [address, setAddress] = useState({});
    const { schoolId } = useParams();

    useEffect(() => {
        const fetchSchoolInfo = async () => {
            try {
                const response = await fetch(`http://localhost:3060/api/school/load/${schoolId}`);
                const data = await response.json();
                setSchoolInfo(data);
            } catch (error) {
                console.error("Error fetching school information: ", error);
            }
        };

        fetchSchoolInfo();
    }, [schoolId]);

    useEffect(() => {
        const fetchAddress = async (addressId) => {
            try {
                const response = await fetch(`http://localhost:3060/api/address/load/${addressId}`);
                const data = await response.json();
                setAddress(data);
            } catch (error) {
                console.error("Error fetching address: ", error);
            }
        };

        if (schoolInfo.address_id) {
            fetchAddress(schoolInfo.address_id);
        }
    }, [schoolInfo.address_id]);

    return (
        <>
            <ColumnWrapper style={styles.card_section_style}>
                <Heading4 text='Basic Information' />
                {/* <h2>{uname || 'Username'}</h2> */}
                <ColumnWrapper style={styles.info_section_style}>
                    {[
                        { label: 'School Name', value: schoolInfo.name },
                        { label: 'School Status', value: schoolInfo.status },
                        { label: 'School Code', value: schoolInfo.school_code },
                        { label: 'Type', value: schoolInfo.type },
                        { label: 'Affiliation', value: schoolInfo.affiliation },
                        { label: 'School Level', value: schoolInfo.school_level },
                        { label: 'Established Year', value: schoolInfo.established_year },
                        { label: 'Accreditation Status', value: schoolInfo.accreditation_status },
                        { label: 'School Motto', value: schoolInfo.school_motto },
                    ].map((item, index) => (
                        <RowWrapper key={index} style={styles.information_row}>
                            <Label text={`${item.label}: `} />
                            <Paragraph text={item.value || 'N/A'} />
                        </RowWrapper>
                    ))}
                    <RowWrapper style={styles.information_row}>
                        <Label text='School Logo: ' />
                        <img
                            src={schoolInfo.school_logo || 'https://via.placeholder.com/150'}
                            alt='School Logo'
                            style={styles.school_logo_info_styles}
                        />
                    </RowWrapper>
                    <RowWrapper style={styles.information_row}>
                        <Label text='Website: ' />
                        <Paragraph text={schoolInfo.website || 'N/A'} />
                    </RowWrapper>
                    <RowWrapper style={styles.information_row}>
                        <Label text='Email: ' />
                        <Paragraph text={schoolInfo.email || 'N/A'} />
                    </RowWrapper>
                </ColumnWrapper>
            </ColumnWrapper>

            <ColumnWrapper style={styles.card_section_style}>
                <Heading4 text='Contact Information' />
                <ColumnWrapper style={styles.info_section_style}>
                    <RowWrapper style={styles.information_row}>
                        <Label text='Address: ' />
                        <Paragraph
                            text={`${address.city || ''}, ${address.subcity || ''}, ${address.woreda || ''}, ${address.kebele || ''}` || 'N/A'}
                        />
                    </RowWrapper>
                    <RowWrapper style={styles.information_row}>
                        <Label text='Contact Details: ' />
                        <Paragraph text={schoolInfo.contact_details || 'N/A'} />
                    </RowWrapper>
                </ColumnWrapper>
            </ColumnWrapper>

            <ColumnWrapper style={styles.card_section_style}>
                <Heading4 text='Facilities and Resources' />
                <ColumnWrapper style={styles.info_section_style}>
                    {[
                        { label: 'Campus Area', value: schoolInfo.campus_area },
                        { label: 'Number of Classrooms', value: schoolInfo.facilities_number_of_classrooms },
                        { label: 'Number of Labs', value: schoolInfo.number_of_labs },
                        { label: 'Transport Facility', value: schoolInfo.transport_facility ? 'Yes' : 'No' },
                        { label: 'Hostel Facility', value: schoolInfo.hostel_facility ? 'Yes' : 'No' },
                        { label: 'Health Services', value: schoolInfo.health_services ? 'Yes' : 'No' },
                        { label: 'Accessibility Features', value: schoolInfo.accessibility_features },
                    ].map((item, index) => (
                        <RowWrapper key={index} style={styles.information_row}>
                            <Label text={`${item.label}: `} />
                            <Paragraph text={item.value || 'N/A'} />
                        </RowWrapper>
                    ))}
                </ColumnWrapper>
            </ColumnWrapper>

            <ColumnWrapper style={styles.card_section_style}>
                <Heading4 text='Management and Staff' />
                <ColumnWrapper style={styles.info_section_style}>
                    {[
                        { label: 'School Manager', value: schoolInfo.school_manager },
                        { label: 'Principal', value: schoolInfo.principal },
                        { label: 'Total Teachers', value: schoolInfo.total_teachers },
                        { label: 'Teacher-Student Ratio', value: schoolInfo.teacher_student_ratio },
                    ].map((item, index) => (
                        <RowWrapper key={index} style={styles.information_row}>
                            <Label text={`${item.label}: `} />
                            <Paragraph text={item.value || 'N/A'} />
                        </RowWrapper>
                    ))}
                </ColumnWrapper>
            </ColumnWrapper>

            <ColumnWrapper style={styles.card_section_style}>
                <Heading4 text='Student Information' />
                <ColumnWrapper style={styles.info_section_style}>
                    {[
                        { label: 'Total Students', value: schoolInfo.total_students },
                        { label: 'Student Gender Ratio', value: schoolInfo.student_gender_ratio },
                        { label: 'Special Programs', value: schoolInfo.special_programs },
                        { label: 'Language Offerings', value: schoolInfo.language_offerings },
                    ].map((item, index) => (
                        <RowWrapper key={index} style={styles.information_row}>
                            <Label text={`${item.label}: `} />
                            <Paragraph text={item.value || 'N/A'} />
                        </RowWrapper>
                    ))}
                </ColumnWrapper>
            </ColumnWrapper>

            <ColumnWrapper style={styles.card_section_style}>
                <Heading4 text='Financial Information' />
                <ColumnWrapper style={styles.info_section_style}>
                    {[
                        { label: 'Annual Budget', value: schoolInfo.annual_budget },
                        { label: 'Annual Tuition Fee', value: schoolInfo.annual_tuition_fee },
                        { label: 'Sponsorship Details', value: schoolInfo.sponsorship_details },
                    ].map((item, index) => (
                        <RowWrapper key={index} style={styles.information_row}>
                            <Label text={`${item.label}: `} />
                            <Paragraph text={item.value || 'N/A'} />
                        </RowWrapper>
                    ))}
                </ColumnWrapper>
            </ColumnWrapper>

            <ColumnWrapper style={styles.card_section_style}>
                <Heading4 text='Additional Details' />
                <ColumnWrapper style={styles.info_section_style}>
                    {[
                        { label: 'Medium of Instruction', value: schoolInfo.medium_of_instruction },
                        { label: 'Accreditation Number', value: schoolInfo.accreditation_number },
                        { label: 'Special Programs', value: schoolInfo.special_programs },
                        { label: 'Accessibility Features', value: schoolInfo.accessibility_features },
                    ].map((item, index) => (
                        <RowWrapper key={index} style={styles.information_row}>
                            <Label text={`${item.label}: `} />
                            <Paragraph text={item.value || 'N/A'} />
                        </RowWrapper>
                    ))}
                </ColumnWrapper>
            </ColumnWrapper>
            <ColumnWrapper style={styles.card_section_style}>
                <Link to={`/admin/school/edit/${schoolId}`}>
                    <SecondaryButton>Edit Details</SecondaryButton>
                </Link>
            </ColumnWrapper>
        </>
    );
}

export default SchoolDetails;

const styles = {
    card_section_style: {
        padding: '20px',
        border: 'none',
        borderRadius: '30px',
        background: 'white'
    },
    info_section_style: {
        background: 'rgba(0,180,250,0.05)',
        padding: '10px',
        borderRadius: '20px',
        border: 'none',
    },
    information_row: {
        background: 'rgba(0,150,200,0.05)',
        marginTop: '3px',
        marginBottom: '3px',
        justifyContent: 'space-between',
        alignItems: 'center',
        gap: '10px',
        border: 'none'
    },
    school_logo_info_styles: {
        maxWidth: '200px',
    },
};
import React from 'react'

function Help() {
  return (
    <div>Help</div>
  )
}

export default Helpimport React, { useEffect } from "react";
import { Outlet, useLocation, useNavigate } from "react-router-dom";

function Users() {

  const location = useLocation();
  const navigate = useNavigate();

  useEffect(()=> {
    location.pathname === '/admin/users' && navigate('/admin/users/overview');
  },[])

  return (
    <>
      <Outlet />
    </>
  );
}

export default Users;
import React from 'react'

function Logout() {
  return (
    <div>Logout</div>
  )
}

export default Logoutimport React, { useState } from 'react';

import ColumnWrapper from '../../../components/column_wrapper';
import { Heading3,Heading6, Label } from '../../../components/Typography';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { PrimaryButton, SecondaryButton } from '../../../components/buttons';
import RowWrapper from '../../../components/row_wrapper';
import {useNavigate} from 'react-router-dom';
import '../../../styles/admin-dashboard/admin-dashboard-home.css';

library.add(fas);

function Home() {

  const navigate = useNavigate();

  const handleAddSchool = () => {

    // console.log('adding school button');
    navigate('/admin/school/add');
  }

  const handleAddPrincipal = () => {
    navigate('/admin/users/overview/principal/create/user')
  }
  const styles = {
    adding_button: {
        gap: '10px',
        justifyContent: 'start',
        alignItems: 'center',
        // padding: '10px',
        cursor: 'pointer',
        borderRadius: '5px',
        border: 'none',
        // width: '160px',
        fontWeight: 'lighter',
        fontSize: '0.8rem',
    },
    adding_button_text: {
        fontSize: '1.2rem',
        fontWeight: 'bold',
    },
    data_overview_card_style: { 
      width: '20%',
      height: '100px',
      justifyContent: 'center',
      alignItems: 'center',
      boxShadow: '3px 3px 5px 0px #0088ff23',
      borderRadius: '10px',
      background: '#0088ff',
      gap: '20px'
    },
    data_overview_card_container_styles: {
      gap: '10px',
      justifyContent: 'space-around',
      alignItems: 'center',
      padding: '10px',
      borderRadius: '5px',
      background: 'white',
      padding: '40px 20px',
      border: 'none',
    },
    quick_action_container_style: {
      gap: '10px',
      justifyContent: 'center',
      alignItems: 'stretch',
      padding: '10px',
      cursor: 'pointer',
      borderRadius: '5px',
      // background: 'red',
      border: 'none',

    },
    main_content_part_two: {
      background: 'white',
      border: 'none',
      justifyContent: 'space-between',
      marginTop: '20px',
      padding: '10px',
      borderRadius: '20px',
    },
    quick_action_button_container_card_style:{
      background: 'rgba(49,182,255,0.07)',
      alignItems: 'center',
      borderRadius: '23px',
      padding: '10px',
    }
  }
  return (
    <div>
          <Heading3 text='Data Overview'/>

          <Label text='The followings are the overview of the entire data' />

          <RowWrapper
          style={styles.data_overview_card_container_styles}>

            {
              [
                {background: '#0088ff', number: '390', text: 'Schools'},
                {background: '#f09281', number: '1200+', text: 'Students'},
                {background: '#2E8B57', number: '500+', text: 'Teachers'},
                {background: '#DAA520', number: '200+', text: 'Parents'},
              ].map((cardinfo) => (
                <ColumnWrapper style={{background: cardinfo.background}} className='data_overview_card_style'>
                    <Heading3 text={cardinfo.number} style={{ color: 'white',fontWeight:'bold' }} />
                    <Label text={cardinfo.text} style={{ color: 'white',fontWeight:'bold' }} />
                </ColumnWrapper>
              ))
            }

          </RowWrapper>
          <RowWrapper style={styles.main_content_part_two}>
            <ColumnWrapper style={styles.quick_action_button_container_card_style}>
            <Heading6 text="Quick Actions"/>
              <ColumnWrapper style={styles.quick_action_container_style}>
                
                <SecondaryButton onClick={handleAddSchool}>
                    <RowWrapper style={styles.adding_button}>
                        <FontAwesomeIcon icon="fa-solid fa-plus" />
                        Add School
                    </RowWrapper>
                </SecondaryButton>

                <SecondaryButton onClick={handleAddPrincipal}>
                    <RowWrapper style={styles.adding_button}>
                        <FontAwesomeIcon icon="fa-solid fa-plus" />
                        Add Principal
                    </RowWrapper>
                </SecondaryButton>

              </ColumnWrapper>
            </ColumnWrapper>
            
            <ColumnWrapper>
            <Heading6 text="Recent Activities"/>
            <Label text="Recent Activities"/>
            <Label text="Recent Activities"/>
            {/* <Label text={localStorage.getItem('username')} /> */}
            </ColumnWrapper>
          </RowWrapper>
        </div> 
  )
}

export default Homeimport React from 'react'

function Reports() {
  return (
    <div>Reports</div>
  )
}

export default Reportsimport React, { Fragment, useEffect, useState } from 'react';
import { Heading3, Label } from '../../../components/Typography';
import ColumnWrapper from '../../../components/column_wrapper';
import RowWrapper from '../../../components/row_wrapper';
import { Checkbox } from '../../../components/input_field';
import { CheckboxWrapper } from '../../../components/wrapper';
import { SecondaryButton } from '../../../components/buttons';

// import SchoolListing from './school-pages/school-listing';
// import AddSchool from './school-pages/add-school';

import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { Outlet, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { addFilter } from '../../../store';


library.add(fas);


function School() {
  const navigate = useNavigate();

  const dispatch = useDispatch();
  const [schoolWindow, setSchoolWindow] = useState('listing');
  const [isLoading, setIsLoading] = useState(false);
  
  const [filterVisible, setFilterVisible] = useState(false)

  const [filters, setFilters] = useState([])

  const filterArray = []

  const handleFilterChange = (e) => {
    const value = e.target.value;
    if (e.target.checked) {
      setFilters((prevState) => [...prevState, value]);  // Add the new filter
    } else {
      setFilters((prevState) => prevState.filter((filter) => filter !== value)); // This line of code filters out the unchecked filter from the `filters` state array. It does this by iterating over each element in the `prevState` array using the `filter` method. The `filter` method creates a new array with all elements that pass the test implemented by the provided function. In this case, the test is `(filter) => filter !== value`, which means that the element will be included in the new array if it is not equal to the `value` of the current event target. 
      // So, if the event target's value is 'active', this line of code will create a new array that only contains the elements from `prevState` that are not equal to 'active'. If `prevState` initially contains ['active', 'deleted'], the new state array will be `['deleted']`.
    }
  };

  
  let newFilters = []
  useEffect(() => {
    filters.length && dispatch(addFilter({ filters: filters }));
    
  }, [filters])

  const filtersState = useSelector((state) => state.filter.filters)

  // console.log("FilterStates", filtersState);
  

  const handleFilterPrint = () => {
    // filterArray.push(filters)
    // console.log(filterArray);
    console.log(filters);
    
  }

  
  const handleAddSchoolClick = () => {
    setIsLoading(true);
    setTimeout(() => {
      schoolWindow === 'listing' ? setSchoolWindow('add') : setSchoolWindow('listing');
      schoolWindow === 'listing' ? navigate('/admin/school/add') : navigate('/admin/school/listing/all');
      setIsLoading(false);
    }, 500); 
  };

  const handleFilterClick = () => {
    setFilterVisible(!filterVisible)
  }
  const styles = {
    columnWrapper: {
      borderRadius: '15px',
      overflow: 'scroll',
      padding: '10px',
      border: 'none',
      // boxShadow: '0px 0px 20px 0px rgba(0,136,255,0.2)',
      background: 'white',
    },
    rowWrapperTop: {
      width: '100%',
      justifyContent: 'space-between',
      border: 'none',
    },
    searchWrapper: {
      width: '300px',
      borderRadius: '20px',
      justifyContent: 'end',
      alignItems: 'center',
      padding: '0',
      // border: 'none',
      // boxShadow: '0px 0px 20px 0px rgba(0,136,255,0.2)',
      border: '1px solid #e8e8e8',
    },
    searchInput: {
      borderRadius: '20px 0 0 20px',
      fontSize: '0.8rem',
      width: '100%',
      // minWidth: '300px',
      height: '60%',
      border: 'none',
    },
    searchIcon: {
      padding: '10px',
      borderRadius: '0 20px 20px 0',
      // background: '#0088ff',
      // background: '#e8e8e8',
      background: 'rgba(0,141,218,1)',
      cursor: 'pointer',
      width: '40px',
    },
    add_listing_button: {
      borderRadius: '5px',
      border: 'none',
      // boxShadow: '0px 0px 20px 0px rgba(0,136,255,0.2)',
      maxWidth: '160px',
      height: '40px',
      fontSize: '0.8rem',
      fontWeight: '600',
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      gap: '5px',
    },
    rowWrapperBottom: {
      gap: '5px',
      height: '100%',
      border: 'none',
    },
    filterColumnWrapper: {
      zIndex: '30',
      width: '200px',
      // height: '100%',
      // border: 'none',
      background: 'rgba(239,250,255,0.41)',
      backdropFilter: 'blur(15px)',
      padding: '30px',
      borderRadius: '20px',
      position: 'absolute',
  
      display: filterVisible ? 'flex' : 'none',
    },
    filterColumnInnerWrapper: {
      gap: '5px',
      border: 'none',
    },
    mainContentColumnWrapper: {
      width: '100%',
      border: 'none',
    },
    search_container: {
      border: 'none', 
      gap: '5px',
    },
    search_filter_container: {
      background: 'rgba(0,141,218,1)',
      borderRadius: '25px',
      alignItems: 'center',
      justifyContent: 'center',
      padding: '0 15px 0 15px',
      gap: '3px',
      cursor: 'pointer',
    },
    main_search_container:{
      // background'red',
      border: 'none',
    },
    filter_items: {
      // background'red',
      border: 'none',
      gap: '5px',
    },
    filter_item: {
      // border: 'none',
      padding: '2px 5px 2px 5px',
      borderRadius: '25px',
      gap: '5px',
      background: 'rgba(0,151,218,0.1)',
      borderWidth: '2px',
      borderColor: 'rgba(0,151,218,1)',
      alignItems: 'center',
      // cursor: 'pointer','
    },
    filter_item_label: {
      fontWeight: 'bold',
      color: 'rgba(0,151,218,1)',
    },
    filter_item_xmark: {
      cursor: 'pointer',
      width: '0.61rem',
      height: '0.61rem',
      // background: 'rgba(255,11,21,1)',
      color: 'rgba(0,151,218,1)',
      border: '2px solid rgba(0,151,218,1)',
      padding: '2px',
      borderRadius: '50%',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
    },
  };
  return (
    <div>
      <Heading3 text="School Management" />
      <ColumnWrapper style={styles.columnWrapper}>
        <RowWrapper style={{ border: 'none' }}>

          <RowWrapper style={styles.rowWrapperTop}>

            {/* Search container */}

            <ColumnWrapper style={styles.main_search_container}>
              <RowWrapper style={styles.search_container}>
                
                <RowWrapper style={styles.search_filter_container} onClick={handleFilterClick}>
                  <FontAwesomeIcon icon='fa-solid fa-filter' style={{color: 'white'}} / >
                  <Label text="Filter Search" style={{fontWeight: 'bold', color: 'white'}}/>
                </RowWrapper>

                <RowWrapper style={styles.searchWrapper}>
                  <input type="text" placeholder="Search school" style={styles.searchInput}/>
                  <FontAwesomeIcon
                    icon="fa-solid fa-search"
                    color="#fff"
                    onClick={() => {
                      alert('hi');
                    }}
                    style={styles.searchIcon}
                  />
                </RowWrapper>
              </RowWrapper>
              <RowWrapper style={styles.filter_items}>

                  { filtersState.map((filter) => (
                      <RowWrapper style={styles.filter_item} key={filter}>

                          <Label text={filter} style={styles.filter_item_label}/>
                          {/* <FontAwesomeIcon icon='fa-solid fa-xmark' style={styles.filter_item_xmark}/> */}
                          {/* <Label text='Public' style={styles.filter_item_label}/>
                          <FontAwesomeIcon icon='fa-solid fa-xmark' style={styles.filter_item_xmark}/> */}
                      </RowWrapper>
              ))}

              </RowWrapper>
            </ColumnWrapper>
            
            {/* Add School and List School Buttons */}
            <SecondaryButton
              style={styles.add_listing_button}
              onClick={handleAddSchoolClick}
              disabled={isLoading}>
                {schoolWindow === 'listing' ? <FontAwesomeIcon icon="fa-solid fa-plus" /> : <FontAwesomeIcon icon="fa-solid fa-list" />}
                { isLoading ? 'Loading...' : schoolWindow === 'listing' ? 'Add School' : 'School Listing'}
            </SecondaryButton>

          </RowWrapper>

        </RowWrapper>

        <RowWrapper style={styles.rowWrapperBottom}>
          
          {/* Filtering Options */}
          <ColumnWrapper style={styles.filterColumnWrapper} >
            <Label text="Filter school search" />
            <ColumnWrapper style={styles.filterColumnInnerWrapper}>
              <CheckboxWrapper wrapperName="School Type" style={{ border: 'none', }}>
                <Checkbox itemName="Public" name="public"  value="Public" title="Public" onChange={handleFilterChange} />
                <Checkbox itemName="Private" name="private" value="Private" title="Private" onChange={handleFilterChange}/>
              </CheckboxWrapper>
              <CheckboxWrapper wrapperName="Location" style={{ border: 'none' }}>
                <Checkbox itemName="Urban" name="urban" value="Urban" title="Urban" onChange={handleFilterChange} />
                <Checkbox itemName="Rural" name="rural" value="Rural" title="Rural" onChange={handleFilterChange} />
              </CheckboxWrapper>
              <CheckboxWrapper wrapperName="School Level" style={{ border: 'none' }}>
                <Checkbox itemName="Primary" name="primary" value="Primary" title="Primary" onChange={handleFilterChange} />
                <Checkbox itemName="Secondary" name="secondary" value="Secondary" title="Secondary" onChange={handleFilterChange} />
                <Checkbox itemName="Higher" name="higher" value="Higher" title="Higher" onChange={handleFilterChange} />
              </CheckboxWrapper>
              <CheckboxWrapper wrapperName="Language Medium" style={{ border: 'none' }}>
                <Checkbox itemName="English" name="english" value="English" title="English" onChange={handleFilterChange} />
                <Checkbox itemName="Afaan Oromoo" name="afaan_oromoo" value="Afaan Oromoo" title="Afaan Oromoo" onChange={handleFilterChange} />
                <Checkbox itemName="Amharic" name="amharic" value="Amharic" title="Amharic" onChange={handleFilterChange} />
              </CheckboxWrapper>
              {/* <button onClick={handleFilterPrint}>Filter</button> */}
            </ColumnWrapper>
          </ColumnWrapper>

          <ColumnWrapper style={styles.mainContentColumnWrapper}>
            <Outlet />
          </ColumnWrapper>
        </RowWrapper>
      </ColumnWrapper>
    </div>
  );
}

export default School;
import React from 'react'

function Settings() {
  return (
    <div>Settings</div>
  )
}

export default Settingsimport React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useNavigate } from 'react-router-dom'; 
import { PrimaryButton } from "../../components/buttons";
import { CenterColumn } from "../../components/center";
import ColumnWrapper from "../../components/column_wrapper";
import { InputField } from "../../components/input_field";
import RowWrapper from "../../components/row_wrapper";
import { Heading1, Label, Heading2 } from "../../components/Typography";
import axios from 'axios';
import { login } from '../../store';
import '../../styles/login.css'

import { useDispatch } from 'react-redux';


function Login() {

  const apiURL = import.meta.env.VITE_API_URL;

  // defining dispatch from redux

  const dispatch = useDispatch();
  
  const [userData, setUserData] = useState({
    username: '',
    password: ''
  })

  const navigate = useNavigate();

  const handleChange = (event) => {
    const { name, value } = event.target;

    setUserData((prevData) => ({
      ...prevData,
      [name]:value
    }))
  }

  
  const handleSubmit = async (event) => {
    event.preventDefault();

    try{
      console.log(userData);
      const response = await axios.post(`${apiURL}/api/user/login`, userData)
      const { token } = response.data;

      if (response.status === 200){
        localStorage.setItem('jwt', token)

        // console.log(token);
        // console.log(response.data);
        // console.log(response.data.user.role);
        
        dispatch(login({username: response.data.user.username, role: response.data.user.role, token:token}))

        // navigate('/admin/home', {state: {username: userData.username}})
        navigate('/admin/home');  

      } else {
        alert('Login Failed, read console message')
        console.log(response.message);
      }
    } catch (error){
      console.error('Error: ', error);
      if (error.response) {
        console.error('Error details: ', error.response.data);
        alert(error.response.data.message) 
      }
      if (error.response && error.response.status === 500) {
        // alert("An internal server error occurred. Please try again later.");
        console.log("An internal server error occurred. Please try again later.");
      } else {
        // alert("An error occurred while submitting the form. Please check your input and try again.");
        console.log("An error occurred while submitting the form. Please check your input and try again.");
      }
    }
  }
  
  return (
    <div>
        <RowWrapper style={styles.outside_wrapper}>
          <ColumnWrapper style={styles.column_with_shadow} className="column_with_shadow">
            <CenterColumn style={{ width: '70%', padding: '30px', justifyContent:'center',alignItems:'center' }}>
              <Heading1 
                text="EMS" 
                style={styles.heading1_style} />
              <Heading2 text="Login" />
              <Label text="Admin Login Portal" />
              <form onSubmit={handleSubmit}>
                <InputField 
                  placeholder="Enter Username" 
                  labelName="Username" 
                  type="text"
                  name='username'
                  value = {userData.username}
                  onChange = {handleChange}
                  />
                <InputField 
                  placeholder="Enter Password" 
                  labelName="Password" 
                  type="password"
                  name='password'
                  value={userData.password}
                  onChange={handleChange}
                  />
                <PrimaryButton style={{ width: '50%', marginTop: '20px' }}>Login</PrimaryButton>
              </form>
              {/* <Label text="Forgot Password?" /> */}
              <Link style={styles.link_style} to={'/auth/create_user'}>Create New User</Link>
            </CenterColumn>
          </ColumnWrapper>
        </RowWrapper>
    </div>
  );
}

const styles = {
  column_with_shadow: {
    width: '30%', 
    height:'70%',
    borderRadius: '30px',
    boxShadow: '0 0 5px rgba(0, 100, 130, 0.21)',
    justifyContent: 'center',
    alignItems: 'center',
    border: 'none'
  },
  outside_wrapper: { 
    height: '95vh',
    gap: '20px', 
    justifyContent: 'center',
    alignItems: 'center',
    border: 'none',
    background: 'rgba(0,190,212,0.02)',
  },
  heading1_style: {
    fontSize: '3rem', 
    fontWeight: '800'
  },
  link_style: {
    color: 'blue',
    textDecoration: 'none',
    fontSize: '0.8rem',
    // background: 'red'
  }

}

export default Login;
// import React from "react";
import FullScreen from '../../components/full_screen';
import { Heading1,Heading2,Label } from '../../components/Typography';
import ColumnWrapper from '../../components/column_wrapper';
import RowWrapper from '../../components/row_wrapper';
import { HorizontalLine } from '../../components/line_separator';
import { InputField } from '../../components/input_field';
import { PrimaryButton } from '../../components/buttons';
import { CenterColumn } from '../../components/center';
import { AiLogo } from '../../components/ems_logo';

function AdminLogin (props){
    return (

        <FullScreen>
        <CenterColumn>

            {/* <Heading1 text="ERP-Based EMS"/> */}
            <AiLogo style={{width:'100px', }}/>
            
            <ColumnWrapper style={
                {
                    width: '20vw', 
                    borderRadius: '30px', 
                    padding: '30px',
                }
            }>
                
                <CenterColumn>
                    <Heading2 text="Admin Login"/>
                    <Label text="Admin portal to login to the system"/>
                </CenterColumn>
                <HorizontalLine style={{background: 'rgb(0, 57, 110)',height:'2px' }} />
                <InputField labelName="Username" placeholder="Enter Username" name="username" type="text" />
                <InputField labelName="Password" placeholder="Enter Password" name="password" type="password" />
                        
                <RowWrapper style={{border: 'none'}}>
                    <PrimaryButton>Submit</PrimaryButton>
                </RowWrapper>
            </ColumnWrapper>   
        </CenterColumn>   
        </FullScreen>      
    );
}

export default AdminLogin// import React from "react";
import FullScreen from '../../components/full_screen'
import { Heading2,Label } from '../../components/Typography';
import ColumnWrapper from '../../components/column_wrapper';
import RowWrapper from '../../components/row_wrapper';
import { HorizontalLine } from '../../components/line_separator';
import { InputField } from '../../components/input_field';
import { PrimaryButton } from '../../components/buttons';
import { CenterColumn } from '../../components/center';
import { AiLogo } from '../../components/ems_logo';
import { useEffect, useState } from 'react';
import Select from 'react-select';
import axios from 'axios';

function CreateUser (props){

    const [userData, setUserData] = useState({
        first_name: '',
        last_name: '',
        username: '',
        password: '',
    });
    
    const [addressData, setAddressData] = useState([]);
    const [roleData, setRoleData] = useState([]);
    const [address_id, setAddressId] = useState('')
    const [role_id, setRoleId] = useState('')

    const getAddress = async () => {
        try{
            const response = await fetch('http://localhost:3060/api/address/load')
            const data = await response.json();
            setAddressData(data);
        }catch(error){
            console.error('Error fetching address: ', error);
        }
    };

    const getRole = async () => {
        try{
            const response = await fetch('http://localhost:3060/api/role/load');
            const data = await response.json();
            setRoleData(data)
        }catch(error){
            console.error('Error fetching roles:', error);
        }
    };

    useEffect(() => {
        getAddress();
        getRole();
    },[]);

    const handleUserChange = (event) =>{
        const{ name, value } = event.target;
        setUserData((prevData) => ({
            ...prevData,
            [name]:value,
        }))
    }

    const handleSubmit = async (event) => {
        // console.log('Submit is clicked');
        // alert('handleSubmit')
        event.preventDefault();

        try {
            const combinedData = {
                ...userData,
                address_id,
                role_id
            };

            const response = await axios.post('http://localhost:3060/api/user/create', combinedData)

            if (response.status === 201) {
                alert('User created succesfully');
                console.log('User created succesfully');
            } else {
                alert('Error Adding User');
                console.log('Error Adding User');
            }
            console.log(combinedData);  

        } catch (error) {
            console.error('Error: ', error);
            if (error.response) {
                console.error('Error details:', error.response.data);
              }
              if (error.response && error.response.status === 500) {
                alert("An internal server error occurred. Please try again later.");
              } else {
                alert("An error occurred while submitting the form. Please check your input and try again.");
              }
        }
    }
    return (
        <CenterColumn>
            <AiLogo style={{width: '100px'}}/>
        <ColumnWrapper style={
            {
                width: '30vw', 
                borderRadius: '30px', 
                padding: '30px',
            }
            
            }>
            <CenterColumn>
            <Heading2 text="Create User"/>
            <Label text="Portal to create Admin of the system"/>
            </CenterColumn>
                
                <HorizontalLine style={{background: 'rgb(0, 57, 110)',height:'2px' }} />
                {/* <InputField labelName="User Role" placeholder="Enter City" name="city" type="text" /> */}

                <form onSubmit={handleSubmit}>
                    <Label text="User Role" required/>
                    <Select
                    placeholder="Select Role"
                    options={roleData.map((roles)=>(
                        {
                            value: roles.role_id,
                            label: roles.role_name,
                        }
                    ))}
                    onChange={(e) => setRoleId(e.value)}
                    >
                    </Select>
                    <InputField 
                        labelName="First Name" 
                        placeholder="Enter First Name" 
                        name="first_name" 
                        type="text" 
                        value = {userData.first_name}
                        onChange = {handleUserChange}
                        />
                    <InputField 
                        labelName="Last Name" 
                        placeholder="Enter Last Name" 
                        name="last_name" 
                        type="text" 
                        value = {userData.last_name}
                        onChange = {handleUserChange}
                        />
                    <InputField 
                        labelName="Username" 
                        required 
                        placeholder="Enter Username" 
                        name="username" 
                        type="text" 
                        value = {userData.username}
                        onChange = {handleUserChange}
                        />
                    <InputField 
                        labelName="Email Address" 
                        placeholder="Enter Email Address" 
                        name="email_address" 
                        type="email" 
                        value = {userData.email}
                        onChange = {handleUserChange}
                        />
                    <InputField 
                        labelName="Phone Number" 
                        placeholder="Enter Phone Number" 
                        name="phone_number" 
                        type="tel" 
                        value = {userData.phone_no}
                        onChange = {handleUserChange}
                        />
                    <InputField 
                        labelName="Password" 
                        required 
                        placeholder="Password" 
                        name="password" 
                        type="password" 
                        value = {userData.password}
                        onChange = {handleUserChange}
                        />
                    {/* <InputField 
                        labelName="Confirm Password" 
                        required placeholder="Confirm Password" 
                        name="confirm_password" 
                        type="password" 
                        /> */}
                    {/* <InputField labelName="Address" placeholder="Enter Street Address" name="street_address" type="text" /> */}
                    <Label text="Address" required/>
                    <Select 
                    placeholder='Select Address'
                    options={addressData.map((address)=>(
                        {
                            value: address.address_id,
                            label: address.city+","+address.subcity+","+address.woreda+","+address.kebele
                        }
                    ))}
                    onChange={(e)=> setAddressId(e.value)}
                    >

                    </Select>
                    
                    <RowWrapper style={{border: 'none'}}>
                        <PrimaryButton>Submit</PrimaryButton>
                    </RowWrapper>
                </form>
        </ColumnWrapper>   
        </CenterColumn>         

        // </FullScreen>
    );
}

export default CreateUser
import React from 'react'
import FullScreen from '../../components/full_screen'
import { Heading2,Label } from '../../components/Typography'
import { AiLogo } from '../../components/ems_logo'
import { HorizontalLine } from '../../components/line_separator'
import ColumnWrapper from '../../components/column_wrapper'
import { CenterColumn } from '../../components/center'
import { InputField } from '../../components/input_field'
import { PrimaryButton } from '../../components/buttons'
import { toPadding } from 'chart.js/helpers'



function StudentLogin() {
  return (
    // <div>StudentLogin</div>
  //
  <FullScreen>

<CenterColumn>
    
    <AiLogo style={{width: '100px'}}/>

    <ColumnWrapper style={{width:'40vh', padding:'30px', borderRadius: '20px'}}>
    
    <CenterColumn>
    <Heading2 text="Student Login"/>
    <Label text="Student login portal"/>
    </CenterColumn>

    
    <HorizontalLine style={{width:'100%', background: 'blue', height:'2px'}} />

    <InputField labelName="Username" type="text" name="username" />
    <InputField labelName="Password" type="password" name="username" />
    <PrimaryButton>Login</PrimaryButton>


    </ColumnWrapper>
    </CenterColumn>
   
  </FullScreen>
  )
}

export default StudentLoginimport React, { useState } from 'react'
import { Heading2 } from '../../components/Typography'
import {InputField} from '../../components/input_field'
import { PrimaryButton, SecondaryButton, TertiaryButton, DangerButton, OKButton } from '../../components/buttons'
import { CenterColumn } from '../../components/center'
import axios from 'axios'
import ColumnWrapper from '../../components/column_wrapper'
import RowWrapper from '../../components/row_wrapper'



function SchoolCreate() {

    const [schoolData, setSchoolData] = useState({
        school_id: '',
        school_name: '',
        school_address: '',
        city: '',
        subcity: '',
        woreda: '',
        kebele: '',
        phone_number: '',
        email_address: '',
        established_year: '',
        school_type: '',
        student_capacity: '',
        current_enrollment: '',
        description: '',
        logo: ''
    });

    const [userData, setUserData] = useState({
        username: '',
        password: '123456',
        role: 'Principal',
        school: '',
    })
    
    const handleChange = (event) => {
        const {name, value} = event.target;

        // setSchoolData({
        //     ...schoolData,
        //     [name]: value,
        // });

        setSchoolData(
            prevSchoolData => {
                const newSchoolData = {
                    ...prevSchoolData,
                    [name]: value,
                };
                
                const user_name = schoolData.school_name
                // let schoolId = schoolData.school_id
            
                let newUsername = [...user_name]
            
                let newUN = ''
            
                for (let i = 0; i < newUsername.length; i++){
                    if (newUsername[i] != " "){
                        newUN = newUN + newUsername[i].toLowerCase()
                    }
                }
            
                setUserData( prevUserData => ({
                    ...prevUserData,
                    username: newUN,
                    school: newSchoolData.school_id,
                }));

                return newSchoolData
                
            }
        )

        // const user_name = schoolData.school_name
        // // let schoolId = schoolData.school_id
    
        // let newUsername = [...user_name]
    
        // let newUN = ''
    
        // for (let i = 0; i < newUsername.length; i++){
        //     if (newUsername[i] != " "){
        //         newUN = newUN + newUsername[i].toLowerCase()
        //     }
        // }
    
        // setUserData({
        //     ...userData,
        //     username: newUN,
        //     school: schoolData.school_id,
        // });

    };


    const handleSubmit = async (event) => {
        event.preventDefault();
        // handleUserData();

        console.log(schoolData);
        // handleUserData();
        console.log("UserData", userData)
        try {
            const response = await axios.post('http://localhost:3060/api/school/create', schoolData);
            try{
            const response2 = await axios.post('http://localhost:3060/api/user/create', userData)
            }catch(error){
                console.error("Error: ", error)
            }
            console.log("Success:", response);
            // handleUserData();
        } catch (error) {
            console.error("Error: ",error)
        }
    };
  return (
    <div >
        <form onSubmit={handleSubmit} >
        <CenterColumn>
        <ColumnWrapper style={{
                width: '400px', 
                padding: '30px',
                borderRadius: '10px',
                }}>
            <Heading2 text="Create New School" />
            <InputField labelName="School ID" placeholder="Enter School ID" name="school_id" type="text"value={schoolData.school_id} onChange={handleChange} />
            <InputField labelName="School Name" placeholder="Enter School Name" name="school_name" type="text"value={schoolData.school_name} onChange={handleChange} />
            <InputField labelName="School Address" placeholder="Enter School Address" name="school_address" type="text"value={schoolData.school_address} onChange={handleChange} />
            <InputField labelName="City" placeholder="Enter City" name="city" type="text"value={schoolData.city} onChange={handleChange} />
            <InputField labelName="Subcity" placeholder="Enter Subcity" name="subcity" type="text"value={schoolData.subcity} onChange={handleChange} />
            <InputField labelName="Woreda" placeholder="Enter Woreda" name="woreda" type="text"value={schoolData.woreda} onChange={handleChange} />
            <InputField labelName="Kebele" placeholder="Enter Kebele" name="kebele" type="text"value={schoolData.kebele} onChange={handleChange} />
            <InputField labelName="Phone Number" placeholder="Enter Phone Number" name="phone_number" type="tel" value={schoolData.phone_number} onChange={handleChange}/>
            <InputField labelName="Email Address" placeholder="Enter Email Address" name="email_address" type="email" value={schoolData.email_address} onChange={handleChange} />
            <InputField labelName="Established Year" placeholder="Enter Established Year" name="established_year" type="number" value={schoolData.established_year} onChange={handleChange} />
            <InputField labelName="School Type" placeholder="Enter School Type" name="school_type" type="text"value={schoolData.school_type} onChange={handleChange} />
            <InputField labelName="Student Capacity" placeholder="Enter Student Capacity" name="student_capacity" type="number" value={schoolData.student_capacity} onChange={handleChange} />
            <InputField labelName="Current Enrollment" placeholder="Enter Current Enrollment" name="current_enrollment" type="number" value={schoolData.current_enrollment} onChange={handleChange} />
            <InputField labelName="Description" placeholder="Enter Description" name="description" type="text"value={schoolData.description} onChange={handleChange} />
            <InputField labelName="Logo URL" placeholder="Enter Logo URL" name="logo" type="url" value={schoolData.logo} onChange={handleChange}/>
            <InputField labelName="Just For Fun" placeholder="This just a placeholder" type="text"/>

            <RowWrapper>
            <PrimaryButton>Submit</PrimaryButton>
            <TertiaryButton>OK</TertiaryButton>
            </RowWrapper>
            </ColumnWrapper>
        </CenterColumn>
        </form>
    </div>
  )
}

export default SchoolCreate;import React from 'react'
import { CenterColumn, CenterRow } from '../../components/center'
import ColumnWrapper from '../../components/column_wrapper'
import { Heading2, Paragraph, Label } from '../../components/Typography'
import { InputField } from '../../components/input_field'
import { PrimaryButton } from '../../components/buttons'
import FullScreen from '../../components/full_screen'

export default function LoginPage() {
  return (
    <FullScreen >
        <CenterColumn>
            <ColumnWrapper style={{width:'400px', padding: '30px', borderRadius: '30px'}}>
            <CenterColumn>
            <Heading2 
            text="Login"
            />
            <Label 
            text="School Login Portal"
            />

            </CenterColumn>
            {/* <Paragraph>This is Paragraph</Paragraph> */}
            <CenterColumn style={{gap:'20px'}}>
            <InputField type="text" labelName="Username"/>
            <InputField type="password" labelName="Password"/>
            <PrimaryButton>Login</PrimaryButton>
            </CenterColumn>
            </ColumnWrapper>
        </CenterColumn>
    </FullScreen>
  )
}
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import { RouterProvider } from 'react-router-dom'
import router from './routes'
// import './index.css'

import { Provider } from 'react-redux'
import store from './store'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    
    {/* <App /> */}
    {/* <div>Hello</div> */}

    <Provider store={store}>
      <RouterProvider router={router} />
    </Provider>
    
  </React.StrictMode>,
)

import { createBrowserRouter } from 'react-router-dom'
import mainRoutes from './main_routes'
import authRoutes from './auth_routes'
import adminRoutes from './admin_routes'

const router = createBrowserRouter(
    [
        mainRoutes,
        authRoutes,
        adminRoutes,
    ]
)

export default router;import React from 'react';
import AdminDashboard from '../pages/admin/admin_dashboard';
import Help from '../pages/admin/dashboard-contents/help';
import Home from '../pages/admin/dashboard-contents/home';
import Logout from '../pages/admin/dashboard-contents/logout';
import Profile from '../pages/admin/dashboard-contents/profile';
import Report from '../pages/admin/dashboard-contents/report';
import School from '../pages/admin/dashboard-contents/school';
import AddSchool from '../pages/admin/dashboard-contents/school-pages/add-school';
import SchoolListing from '../pages/admin/dashboard-contents/school-pages/school-listing';
import Settings from '../pages/admin/dashboard-contents/setting';
import Users from '../pages/admin/dashboard-contents/users';

import ViewSchool from '../pages/admin/dashboard-contents/school-pages/view-school';
import EditSchool from '../pages/admin/dashboard-contents/school-pages/edit-school';

import AllSchoolListing from '../pages/admin/dashboard-contents/school-pages/school-lists/all-school-listing';
import ActiveSchoolListing from '../pages/admin/dashboard-contents/school-pages/school-lists/active-school-listing';
import PendingSchoolListing from '../pages/admin/dashboard-contents/school-pages/school-lists/pending-school-listing';
import DeletedSchoolListing from '../pages/admin/dashboard-contents/school-pages/school-lists/deleted-school-listing';
import ArchivedSchoolListing from '../pages/admin/dashboard-contents/school-pages/school-lists/archived-school-listing';

import SchoolDetails from '../pages/admin/dashboard-contents/school-pages/school-info-pages/school-details';
import SchoolStudents from '../pages/admin/dashboard-contents/school-pages/school-info-pages/school-students';
import SchoolTeachers from '../pages/admin/dashboard-contents/school-pages/school-info-pages/school-teachers';
import SchoolDepartments from '../pages/admin/dashboard-contents/school-pages/school-info-pages/school-departments';
import SchoolClubs from '../pages/admin/dashboard-contents/school-pages/school-info-pages/school-clubs';
import SchoolEvents from '../pages/admin/dashboard-contents/school-pages/school-info-pages/school-events';
import SchoolExtras from '../pages/admin/dashboard-contents/school-pages/school-info-pages/school-extras';

import OverviewPages from '../pages/admin/dashboard-contents/user-pages/overview-page';
import Principal from '../pages/admin/dashboard-contents/user-pages/principal';
import Supervisor from '../pages/admin/dashboard-contents/user-pages/supervisor';
import Teacher from '../pages/admin/dashboard-contents/user-pages/teacher';
import Student from '../pages/admin/dashboard-contents/user-pages/student';
import Parent from '../pages/admin/dashboard-contents/user-pages/parent';

import CreatePrincipal from '../pages/admin/dashboard-contents/user-pages/user-principal/create-principal';
  import CreatePrincipalUser from '../pages/admin/dashboard-contents/user-pages/user-principal/create-principal-pages/create-principals-user-info';
  import CreatePrincipalSpecific from '../pages/admin/dashboard-contents/user-pages/user-principal/create-principal-pages/create-principal-specific-info';
  import TestPrincipal from '../pages/admin/dashboard-contents/user-pages/user-principal/create-principal-pages/test-principal';
// import PrincipalList from '../pages/admin/dashoard-contents/user-pages/user-principal/principal-list/principal-lists';
import PrincipalList from '../pages/admin/dashboard-contents/user-pages/user-principal/principal-list/principal-lists.jsx';
  import ViewPrincipal from '../pages/admin/dashboard-contents/user-pages/user-principal/principal-list/view-principal.jsx';
  import ViewPrincipalProfile from '../pages/admin/dashboard-contents/user-pages/user-principal/principal-list/view-principal-profile.jsx';

// import { elements } from 'chart.js';
import ProtectedRoute from '../components/protectred_routes';
import CreateContact from '../pages/admin/dashboard-contents/user-pages/user-principal/create-principal-pages/create-contact.jsx';

const adminRoutes = {
  path: '/admin',
  element: <AdminDashboard />,
  // errorElement: <div>404</div>,
  // element: { path: 'home', element: <ProtectedRoute component={Home} />},
  children: [
    // { path: 'home', element: <Home /> },
    { path: 'home', element: <ProtectedRoute component={Home} />},
    // { path: 'help', element: <Help /> },
    { path: 'help', element: <ProtectedRoute component={Help} />},
    // { path: 'logout', element: <Logout /> },
    { path: 'logout', element: <ProtectedRoute component={Logout} /> },
    // { path: 'profile', element: <Profile /> },
    { path: 'profile', element: <ProtectedRoute component={Profile} /> },
    // { path: 'report', element: <Report /> },
    { path: 'report', element: <ProtectedRoute component={Report} /> },
    // { path: 'school', element: <School />,
    { path: 'school', element: <ProtectedRoute component={School} />,
      children : [
        {path: 'add', element: <AddSchool />},
        {path: 'listing', element: <SchoolListing />,
          children: [
            {path: 'all', element: <AllSchoolListing />},
            {path: 'active', element: <ActiveSchoolListing />},
            {path: 'pending', element: <PendingSchoolListing />},
            {path: 'deleted', element: <DeletedSchoolListing />},
            {path: 'archived', element: <ArchivedSchoolListing />},
          ]
        },
        {path: 'view/:schoolId', element: <ViewSchool />,
          children: [
            {path: 'details', element: <SchoolDetails />},
            {path: 'students', element: <SchoolStudents />},
            {path: 'teachers', element: <SchoolTeachers />},
            {path: 'departments', element: <SchoolDepartments />},
            {path: 'clubs', element: <SchoolClubs />},
            {path: 'events', element: <SchoolEvents />},
            {path: 'extras', element: <SchoolExtras />},
          ]
        },
        {path: 'edit/:schoolId', element: <EditSchool />},
      ]
    },
    // { path: 'school/add', element: <AddSchool /> },
    // { path: 'school/listing', element: <SchoolListing /> },
    // { path: 'settings', element: <Settings /> },
    { path: 'settings', element: <ProtectedRoute component={Settings} /> },
    // { path: 'users', element: <Users /> },
    { 
      path: 'users', 
      element: < ProtectedRoute component={Users} /> ,
      // errorElement: <div>404</div>, // Place errorElement here
      children: [
        {path: 'overview', element: <OverviewPages />,
          children: [
            {path: 'principal', element: <Principal />,
              children: [
                {path: 'create', element: <CreatePrincipal />,
                  children : [
                    {path: 'user', element: <CreatePrincipalUser />,
                      children: [
                        {path: 'specific/:user_id', element: <CreatePrincipalSpecific />}
                      ]
                    },
                    // {path: 'specific/:user_id', element: <CreatePrincipalSpecific />},
                    {path: 'contact/:user_id', element: <CreateContact />},
                    {path: 'test', element: <TestPrincipal />},
                    // {path: 'specific', element: <CreatePrincipalSpecific />},
                  ]
                },
                {path: 'list', element: <PrincipalList />,
                  children: [
                    // {path: 'view/:principalId', element: <ViewPrincipal />},
                    {path: 'view', element: <ViewPrincipal />},
                  ]
                },
                {path: 'view_profile', element: <ViewPrincipalProfile />}
              ]
            },
            {path: 'supervisor', element: <Supervisor />},
            {path: 'teacher', element: <Teacher />},
            {path: 'student', element: <Student />},
            {path: 'parent', element: <Parent />},
          ]
        },
      ],

    // },
  },
  ],
};

export default adminRoutes;
import React from "react"
// import { Routes, Route } from "react-router-dom"
import LoginPage from "../pages/auth-pages/login"
// import LoginPage from "../pages/auth-pages/login"
import AdminLogin from "../pages/auth-pages/admin_login"
import StudentLogin from "../pages/auth-pages/student_login"
import CreateUser from "../pages/auth-pages/create_user"
import Login from "../pages/admin/login"

// function AuthRoutes() {
//   return (
//     <Routes>
//         <Route path="login" element={< LoginPage/>} />
//         <Route path="login_page" element={< Login/>} />
//         <Route path="admin_login" element={<AdminLogin/>} />
//         <Route path="student_login" element={<StudentLogin/>} />
//         <Route path="create_user" element={<CreateUser/>} />
//         <Route path="not" element={<NotFound/>} errorElement = {<div> Error <br/>404 Not Found</div>}/>
//     </Routes>
//   )
// }

// export default AuthRoutes

const authRoutes = {
    path: '/auth',
    children: [
        { path: 'login', element: <Login /> },
        { path: 'admin_login', element: <AdminLogin /> },
        { path: 'student_login', element: <StudentLogin /> },
        { path: 'create_user', element: <CreateUser /> },
        { path: 'login_page', element: <Login /> }
    ],
};

export default authRoutes;import Home from "../pages";

const mainRoutes = {
    path: '/',
    element: <Home />,
};

export default mainRoutes;import React from 'react'
import '../styles/buttons.css';

export const PrimaryButton = (props) => {
    return(
        <button className="primary"
            type={props.type}
            disabled={props.disabled}
            name={props.name}
            value={props.value}
            autoFocus={props.autoFocus}
            form={props.form}
            formAction={props.formAction}
            formEncType={props.formEncType}
            formMethod={props.formMethod}
            formNoValidate={props.formNoValidate}
            formTarget={props.formTarget}
            id={props.id}
            onClick={props.onClick}
            aria-label={props.ariaLabel}
            aria-hidden={props.ariaHidden}
            aria-expanded={props.ariaExpanded}
            style={props.style}
        >
            {props.children}
        </button>
    );
}

export const SecondaryButton = (props) => {
    return(
        <button className="secondary"
            type={props.type}
            disabled={props.disabled}
            name={props.name}
            value={props.value}
            autoFocus={props.autoFocus}
            form={props.form}
            formAction={props.formAction}
            formEncType={props.formEncType}
            formMethod={props.formMethod}
            formNoValidate={props.formNoValidate}
            formTarget={props.formTarget}
            id={props.id}
            onClick={props.onClick}
            onMouseEnter={props.onMouseEnter}
            onMouseLeave={props.onMouseLeave}
            aria-label={props.ariaLabel}
            aria-hidden={props.ariaHidden}
            aria-expanded={props.ariaExpanded}
            style={props.style}
        >
            {props.children}
        </button>
    );
}

export const TertiaryButton = (props) => {
    return(
        <button className="tertiary"
            type={props.type}
            disabled={props.disabled}
            name={props.name}
            value={props.value}
            autoFocus={props.autoFocus}
            form={props.form}
            formAction={props.formAction}
            formEncType={props.formEncType}
            formMethod={props.formMethod}
            formNoValidate={props.formNoValidate}
            formTarget={props.formTarget}
            id={props.id}
            onClick={props.onClick}
            aria-label={props.ariaLabel}
            aria-hidden={props.ariaHidden}
            aria-expanded={props.ariaExpanded}
            style={props.style}
        >
            {props.children}
        </button>
    );
}

export const DisabledButton = (props) => {
    return(
        <button className="disabled">
            {props.children}
        </button>
    );
}

export const DangerButton = (props) => {
    return(
        <button className="danger"
            type={props.type}
            disabled={props.disabled}
            name={props.name}
            value={props.value}
            autoFocus={props.autoFocus}
            form={props.form}
            formAction={props.formAction}
            formEncType={props.formEncType}
            formMethod={props.formMethod}
            formNoValidate={props.formNoValidate}
            formTarget={props.formTarget}
            id={props.id}
            onClick={props.onClick}
            aria-label={props.ariaLabel}
            aria-hidden={props.ariaHidden}
            aria-expanded={props.ariaExpanded}
            style={props.style}
        >
            {props.children}
        </button>
    );
}

export const OKButton = (props) => {
    return(
        <button className="ok">
            {props.children}
        </button>
    );
}import '../styles/logo_style.css'

import ems_ai_logo from "../assets/ems_ai_logo.png"
import ems_ai_logo2 from "../assets/ems_ai_logo2.jpeg"
import ems_ai_logo3 from "../assets/ems_ai_logo3.jpeg"
export const AiLogo = (props) =>{
    return(
        <img src={ems_ai_logo} alt="" className="ai_logo" style={props.style} />
    )
}

export const AiLogo2 = (props) =>{
    return(
        <img src={ems_ai_logo2} alt="" className="ai_logo" style={props.style} />
    )
}

export const AiLogo3 = (props) =>{
    return(
        <img src={ems_ai_logo3} alt="" className="ai_logo" style={props.style} />
    )
}import React from 'react'
import '../styles/input_style.css';
import { Label } from './Typography';

export const InputField = (props) => {
  return (
    <div className={"input_field"}>
        <label htmlFor={props.id} style={{display:'flex',flexDirection:'row', fontSize:'0.9rem', fontWeight:'normal', color:'red'}}><Label text={props.labelName}/> {props.required ?"*":""}</label>
        <input 
         className={"input"+" "+props.className}
         id= {props.id}
         type= {props.type} 
         name= {props.name}
         value= {props.value}
         placeholder= {props.placeholder}
         required= {props.required}
         disabled= {props.disabled}
         readOnly= {props.readOnly}
         maxLength= {props.maxLength}
         minLength= {props.minLength}
         min= {props.min}
         max= {props.max}
         step= {props.step}
         pattern= {props.pattern}
         autoFocus= {props.autoFocus}
         autoComplete= {props.autoComplete}
         multiple= {props.multiple}
         size= {props.size}
         onChange= {props.onChange}
         onBlur= {props.onBlur}
         onFocus= {props.onFocus} 
         style={props.style}
         />
    </div>
  );
}

export const RadioButton = (props) => {
  return (
    <div className="input_field">
        <label htmlFor={props.id}>{props.labelName}</label>
        <input type="radio" id={props.id} name={props.name} value={props.value} />
    </div>
  );
}

export const Checkbox = (props) => {
  return (
    <div className="input_field">
        <label htmlFor={props.id} className='checkbox-name'>
        <input
            type="checkbox"
            id={props.id}                      // The unique identifier for the checkbox
            name={props.name}                  // The name attribute, often used to group checkboxes
            value={props.value}                // The value associated with the checkbox
            checked={props.checked}            // Controls the checked state of the checkbox (for controlled components)
            defaultChecked={props.defaultChecked} // Sets the initial checked state (for uncontrolled components)
            onChange={props.onChange}          // Event handler for when the checkbox state changes
            disabled={props.disabled}          // Disables the checkbox if true
            className={props.className}        // CSS class names for styling the checkbox
            style={props.style}                // Inline styles for the checkbox
            required={props.required}          // If true, the checkbox must be checked before submitting the form
            aria-label={props.ariaLabel}       // Accessibility label for screen readers
            aria-labelledby={props.ariaLabelledby} // ID of the element that labels the checkbox
            aria-describedby={props.ariaDescribedby} // ID of the element that provides additional description
            title={props.title}                // Tooltip text when hovering over the checkbox
            autoFocus={props.autoFocus}        // Automatically focuses the checkbox when the page loads
            form={props.form}                  // Associates the checkbox with a specific form
            tabIndex={props.tabIndex}          // Controls the tab order when navigating with the keyboard
            readOnly={props.readOnly}          // Makes the checkbox read-only, it can be checked but not edited
            onFocus={props.onFocus}            // Event handler for when the checkbox gains focus
            onBlur={props.onBlur}              // Event handler for when the checkbox loses focus
            onClick={props.onClick}            // Event handler for when the checkbox is clicked
            ref={props.innerRef}               // Reference to the input element, useful for accessing the DOM node directly
        />

          {props.itemName}
        </label>
    </div>
  );
}   

export const TextArea = (props) => {
  return (
    <div className="input_field">
        <label htmlFor={props.id}>{props.labelName}</label>
        <textarea id={props.id} name={props.name} value={props.value} />
    </div>
  );    
}


export const DropDown = (props) => {
  return (
    <div className="input_field">
        <label htmlFor={props.id}>{props.labelName}</label>
        <select id={props.id} name={props.name} value={props.value}>
          {/* <option value="">{props.placeholder}</option> */}
          {props.children}
       </select>       
    </div>
    )}import React from 'react'
import '../styles/line_style.css'

export const HorizontalLine = (props) => {
  return (
    <div className="horizontal_line" style={props.style}></div>
  )
}

export const VerticalLine = (props)=> {
  return (
    <div className="vertical_line" style={props.style}></div>
  )
}
import React from 'react'
import '../styles/center_containers.css'
export const CenterColumn = (props) => {
  return (
    <div className='center_column' style={props.style}>{props.children}</div>
  )
}


export const CenterRow = (props) => {
  return (
    <div className='center_row'>{props.children}</div>
  )
}
import React from 'react'
import { Heading5 } from '../Typography';

import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

// import '../../styles/admin-school.css'
// import '../button-styles.css'

library.add(fas)

function SchoolListing({title, schools, handleEdit, handleView}) {
    const schoolHeadings = ['School Code', 'School Name', 'Type', 'Action']

  return (
    <div>
      <Heading5 text={title} />

      <div className='school-listing-container'>
        <table className='school-data-table' style={{width:'100%', borderRadius: '10px'}}>
          <thead>
            <tr>
              {schoolHeadings.map((heading, index) => (
                <th key={index}>{heading}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {schools.map((school, index) => (
              <tr key={index}>
                <td>{school.school_code}</td>
                <td>{school.name}</td>
                <td>{school.type}</td>
                <td className='actions'>
                  <button onClick={() => handleEdit(school.school_id)}>
                    <FontAwesomeIcon icon='fa-solid fa-pencil' />
                    Edit
                  </button>

                  <button onClick={() => handleView(school.school_id)}>
                    <FontAwesomeIcon icon='fa-solid fa-eye' />
                    View
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

const styles = {
  school_listing_button_style:{
    width: '150px',
    borderRadius: '5px',
    background: 'rgba(0,140,200,0.11)',
    border: '1px solid rgb(0,140,200)',
    fontWeight: 'normal',
    color: 'rgb(0,140,200)',
  }
}

export default SchoolListing;import React from 'react'
import '../styles/typography_styles.css';

export const Heading1 = (props)=> {
  return (
    <div style={props.style} className='heading1'>{props.text}</div>
  )
}

export const Heading2 = (props)=> {
  return (
    <div style={props.style} className='heading2'>{props.text}</div>
  )
}

export const Heading3 = (props)=> {
  return (
    <div style={props.style} className='heading3'>{props.text}</div>
  )
}

export const Heading4 = (props)=> {
  return (
    <div style={props.style} className='heading4'>{props.text}</div>
  )
}

export const Heading5 = (props)=> {
  return (
    <div style={props.style} className='heading5'>{props.text}</div>
  )
}   

export const Heading6 = (props)=> {
  return (
    <div style={props.style} className='heading6'>{props.text}</div>
  )
}

export const Paragraph = (props)=> {
  return (
    <div style={props.style} className='paragraph'>{props.text}</div>
  )
}

export const Label = (props)=> {  
  return (
    // <div style={props.style} required = {props.required} className='label'>{props.text} {props.required && '*'}</div>
    <div style={props.style} required = {props.required} className={`label ${props.className2}`}>
      {props.text} <element style={{fontSize:'0.9rem', fontWeight:'normal', color:'red'}}>{props.required && '*'}</element></div>
  )
}
import React from 'react'
import '../styles/full_screen.css'

function FullScreen(props) {
  return (
    <div className='full_screen_container' style={props.screenStyle} >{props.children}</div>
  )
}

export default FullScreen;          import { Navigate } from "react-router-dom";

const ProtectedRoute = ({component: Component, ...rest}) => {
    const token = localStorage.getItem('jwt')

    return(
        token ? <Component {...rest} /> : <Navigate to="/auth/login" />
    )
}

export default ProtectedRoute;import React from 'react'
import '../styles/wrapper.css';
import { Label } from './Typography';


export const WrapperWithTitle = (props) => {
    return (
        <div className='wrapper'>
                {props.children}
        </div>
    )
}

export const CheckboxWrapper = (props) => {
    return (
        <div className='checkbox-wrapper' style={props.style}>
            <Label text={props.wrapperName} />
            <div className="wrapper-child">
                {props.children}
            </div>
        </div>
    )
}import React from 'react';
import { Heading3 } from '../components/Typography'; // Ensure this path is correct

const LogoAndName = () => {
  const em_border = 'none';

  const styles = {
    logo_and_name: {
      alignItems: 'center',
      border: em_border,
      gap: '20px',
    },
    saas_name_wrapper: {
      gap: '0px',
      border: em_border,
    },
    saas_name_school: {
      background: 'rgb(0, 57, 110)',
      color: 'white',
      border: em_border,
      borderRadius: '4px',
    },
    saas_name_school_text: {
      color: 'white',
    },
    saas_name_stream: {
      border: em_border,
    },
  };

  return (
    <div style={styles.logo_and_name}>
      <div style={styles.saas_name_wrapper}>
        <div style={styles.saas_name_school}>
          <Heading3 text='School' style={styles.saas_name_school_text} />
        </div>
        <div style={styles.saas_name_stream}>
          <Heading3 text='Stream' />
        </div>
      </div>
    </div>
  );
};

export default LogoAndName;
import React, { Fragment } from 'react'
import React from 'react';
import { Link } from 'react-router-dom'
import RowWrapper from './row_wrapper';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import '../styles/admin_dashboard.css'
import { library } from '@fortawesome/fontawesome-svg-core';

library.add(fas);

function VerticalNav() {

    const styles = {
        
        home_nav_button_style: {
          gap: '10px',
          // justifyContent: 'start',
          justifyContent: 'space-between',
          // justifyContent: 'center',
          alignItems: 'center',
          padding: '10px',
          borderRadius: '5px',
          cursor: 'pointer',
          border: 'none',
          // boxShadow: '3px 3px 5px 0px #0088ff23',
          width: !visibleNav && '120px',
          // fontWeight: 'lighter',
          // background: 'red',
          currentPage: {
            background: 'rgba(200,0,0,0.04)',
            color: 'rgba(200,0,0,1)',
          }
        } 
    }
  return (
    <Fragment>
        {[
            {linkTo: homePage, icon: 'fa-house', label: 'Home', styleClassName: onHomePage && 'onPage'},
            {linkTo: schoolPage, icon: 'fa-school', label: 'School', styleClassName: onSchoolPage && 'onPage'},
            {linkTo: usersPage, icon: 'fa-users', label: 'Users', styleClassName: onUsersPage && 'onPage'},
            {linkTo: reportPage, icon: 'fa-file-alt', label: 'Reports', styleClassName: onReportPage && 'onPage'},
            {linkTo: profilePage, icon: 'fa-user', label: 'Profile', styleClassName: onProfilePage && 'onPage'},
            {linkTo: settingsPage, icon: 'fa-cog', label: 'Settings', styleClassName: onSettingsPage && 'onPage'},
            {linkTo: helpPage, icon: 'fa-question', label: 'Help', styleClassName: onHelpPage && 'onPage'},
        ].map((navInfo) => (
            <Link to={navInfo.linkTo} style={{textDecoration: 'none'}}>
            <RowWrapper style={styles.home_nav_button_style}>
                <FontAwesomeIcon icon={`fa-solid ${navInfo.icon}`} color='#383861' className={navInfo.styleClassName}/>
                <Label text={visibleNav==0?navInfo.label:''} className2={navInfo.styleClassName} />
            </RowWrapper>
            </Link>    
        ))}
    </Fragment>
  )
}

export default VerticalNavimport React, { useState } from 'react'
import { Heading5 } from '../Typography';

import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { Link, useNavigate } from 'react-router-dom';

// import '../../styles/admin-school.css'
// import '../button-styles.css'

library.add(fas)

// function PrincipalListing({title, principals, handleEdit, handleView, width}) {
  function PrincipalListing({title, principals, handleEdit, width}) {

  const [selectedRow, setSelectedRow] =  useState(false);

  const navigate = useNavigate();

  const handleView = (principal) => {
    setSelectedRow(!selectedRow);
    navigate(`/admin/users/overview/principal/list/view`, {state: {principal}})
  }
    // const schoolHeadings = ['School Code', 'School Name', 'Type', 'Action']
    // const principalHeadings = ['','','Name', 'School', 'Type', 'Action'];
    // const principalHeadings = ['','','Name', 'School', 'Type','Contact'];
    const principalHeadings = ['','','Name', 'Gender','School', 'Type'];

  return (
    <div>
      <Heading5 text={title} />

      <div className='school-listing-container'>
        <table className='school-data-table' style={{width: {width}, borderRadius: '10px'}}>
          <thead>
            <tr>
              {principalHeadings.map((heading, index) => (
                <th key={index}>{heading}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {principals.map((principal, index) => (
              // <Link to='/principal/${principal.principal_id'>
                <tr key={index} onClick={() => handleView(principal)} className='table-row'>
                  <td>{index+1}</td>
                  <td>
                    <img 
                    src={principal.user.profile_photo ? principal.user.profile_photo : 
                    "https://www.pngall.com/wp-content/uploads/5/User-Profile-PNG-High-Quality-Image.png"} 
                    // width={40} 
                    alt="principals_avatar" 
                    style={{borderRadius: '50%', width: '40px', height: '40px'}}
                    />
                    </td>
                  {/* <td> <Link style={{textDecoration: 'none', color: 'rgb(0,0,0)'}} to={`/admin/users/overview/principal/list/view/${principal.principal_id}`}> {principal.user.first_name+" "+principal.user.middle_name+" "+principal.user.last_name} </Link> </td> */}
                  <td>{principal.user.first_name+" "+principal.user.middle_name+" "+principal.user.last_name} </td>
                  <td>{principal.school.name}</td>
                  <td>{principal.user.gender}</td>
                  <td>{principal.principal_type}</td>
                  {/* <td>{principal.contact.map((contact, index) => (<p key={index}>{contact.name+": "+contact.phone}</p>))}</td> */}
                  {/* <td className='actions'>
                    <button onClick={() => handleEdit(principal.principal_id)}>
                      <FontAwesomeIcon icon='fa-solid fa-pencil' />
                      Edit
                    </button>

                    <button onClick={() => handleView(principal.principal_id)}>
                      <FontAwesomeIcon icon='fa-solid fa-eye' />
                      View
                    </button>
                  </td> */}
                </tr>
              // </Link>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

const styles = {
  school_listing_button_style:{
    width: '150px',
    borderRadius: '5px',
    background: 'rgba(0,140,200,0.11)',
    border: '1px solid rgb(0,140,200)',
    fontWeight: 'normal',
    color: 'rgb(0,140,200)',
  }
}

export default PrincipalListing;import React from 'react'
import '../styles/row_styles.css';

function RowWrapper(props) {
  return (
    <div className={'row_wrapper'+" "+props.className} style={props.style} onClick={props.onClick} width={props.width}>{props.children}</div>)
}

export default RowWrapper;import React from 'react'
import '../styles/column_styles.css';
function ColumnWrapper(props) {
  return (
    <div className={"column_wrapper"+" "+props.className} style={props.style} onClick={props.onClick} >{props.children}</div>
  )
}

export default ColumnWrapper;